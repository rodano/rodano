#variables using uppercase will be handled by the "env" file provided at runtime to docker-compose (during the deployment of the application)
services:
  db:
    image: mariadb:11.7
    ports:
      - "3307:3306"
    volumes:
      - database:/var/lib/mysql
    environment:
      MARIADB_USER: root
      MARIADB_ROOT_PASSWORD: root
      MARIADB_DATABASE: rodano
      MARIADB_AUTO_UPGRADE: true
    healthcheck:
      test:
        [
          "CMD",
          "healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized"
        ]
      start_period: 10s
      retries: 5
      interval: 5s
      timeout: 30s
    restart: on-failure

  plugins-compiler:
    image: ghcr.io/rodano/plugins-compiler:${TAG}
    volumes:
      #access to the study package, to compile the plugins
      - type: bind
        source: ${STUDY_PATH}/backend
        target: /app
        read_only: false
    working_dir: /app
    command: mvn compile -DskipTests

#comment out the smtp service if you rely on a external SMTP server
  smtp:
    image: ixdotai/smtp
    restart: on-failure

  backend:
    image: ghcr.io/rodano/backend:${TAG}
    pull_policy: always
    depends_on:
      plugins-compiler:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      smtp:
        condition: service_started
    ports:
      - "8080:8080"
    volumes:
      #access to the study package, to get the configuration
      - type: bind
        source: ${STUDY_PATH}
        target: /app/study
        read_only: true
      #access to the study package, to get the plugins
      - type: bind
        source: ${STUDY_PATH}/backend/target/classes
        target: /app/plugins
        read_only: true
     #access to the volume containing resources uploaded by users
      - type: volume
        source: user_content
        target: /app/user_content
        read_only: false
    environment:
      JVM_OPTS: -Xmx512M -XX:+ExitOnOutOfMemoryError
      spring.profiles.active: api,study
      rodano.config: /app/study/config.json
      rodano.environment: VAL
      rodano.database.host: db
      rodano.database.port: 3306
      rodano.database.name: rodano
      rodano.path.data: /app/user_content
      spring.datasource.username: root
      spring.datasource.password: root
      #update the following spring.mail.xxx properties if you use an external SMTP server
      spring.mail.host: smtp
      spring.mail.port: 25
      spring.mail.username: anonymous
      spring.mail.password: unused-but-required
      logging.level.ch.rodano.core: INFO
    healthcheck:
      test:
        [
            "CMD-SHELL",
            "curl -s http://localhost:8080/administration/is-online | grep -q 'study is up'"
        ]
      start_period: 30s
      retries: 5
      interval: 10s
      timeout: 10s
    restart: on-failure

  frontend:
    image: ghcr.io/rodano/frontend:${TAG}
    pull_policy: always
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - backend
    ports:
      - "7586:80"
    volumes:
      #access to the study package, to get the static files
      - type: bind
        source: ${STUDY_PATH}
        target: /app/study
        read_only: true
    restart: on-failure

#the following service is used to dump the database content into a file, to be used for backup purposes
  dumper:
    image: ghcr.io/rodano/database-dumper:${TAG}
    pull_policy: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - type: volume
        source: database_dumps
        target: /dumps
        read_only: false
    environment:
      DATABASE_HOST: db
      DATABASE_NAME: rodano
      DATABASE_USER: root
      DATABASE_PASSWORD: root
    command: bash -c "echo 'Database dumper ready' && tail -f /dev/null"  #keeps the container running so it can be used to dump the database content"
    labels:
      docker-volume-backup.archive-pre: dump.sh

  backuper:
    image: offen/docker-volume-backup:v2
    pull_policy: always
    volumes:
      - database_dumps:/backup/database_dumps:ro
      - user_content:/backup/user_content:ro
      - backups:/archive
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      BACKUP_CRON_EXPRESSION: "0 3 * * *"
      BACKUP_COMPRESSION: gz
      BACKUP_FILENAME: "backup-%Y-%m-%dT%H-%M-%S.tar.gz"
    restart: on-failure

volumes:
  #database volume, to persist the database content
  database:
  #user uploaded content, such as CRF files and resources
  user_content:
  #storage of database dumps
  database_dumps:
  #place where to store automated backups
  backups:
  #  driver_opts:
  #    type: cifs
  #    o: "username=${BACKUP_USERNAME},password=${BACKUP_PASSWORD},domain=MS,noperm"
  #    device: "//${BACKUP_HOST}/backups/"
