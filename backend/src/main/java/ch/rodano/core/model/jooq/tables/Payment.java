/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.PaymentBatch.PaymentBatchPath;
import ch.rodano.core.model.jooq.tables.PaymentTarget.PaymentTargetPath;
import ch.rodano.core.model.jooq.tables.WorkflowStatus.WorkflowStatusPath;
import ch.rodano.core.model.jooq.tables.records.PaymentRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Payment extends TableImpl<PaymentRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>payment</code>
	 */
	public static final Payment PAYMENT = new Payment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PaymentRecord> getRecordType() {
		return PaymentRecord.class;
	}

	/**
	 * The column <code>payment.pk</code>.
	 */
	public final TableField<PaymentRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>payment.creation_time</code>.
	 */
	public final TableField<PaymentRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>payment.last_update_time</code>.
	 */
	public final TableField<PaymentRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>payment.deleted</code>.
	 */
	public final TableField<PaymentRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>payment.payment_batch_fk</code>.
	 */
	public final TableField<PaymentRecord, Long> PAYMENT_BATCH_FK = createField(DSL.name("payment_batch_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>payment.workflow_status_fk</code>.
	 */
	public final TableField<PaymentRecord, Long> WORKFLOW_STATUS_FK = createField(DSL.name("workflow_status_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>payment.plan_id</code>.
	 */
	public final TableField<PaymentRecord, String> PLAN_ID = createField(DSL.name("plan_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

	/**
	 * The column <code>payment.step_id</code>.
	 */
	public final TableField<PaymentRecord, String> STEP_ID = createField(DSL.name("step_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>payment.status</code>.
	 */
	public final TableField<PaymentRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>payment.value</code>.
	 */
	public final TableField<PaymentRecord, Integer> VALUE = createField(DSL.name("value"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

	private Payment(Name alias, Table<PaymentRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Payment(Name alias, Table<PaymentRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>payment</code> table reference
	 */
	public Payment(String alias) {
		this(DSL.name(alias), PAYMENT);
	}

	/**
	 * Create an aliased <code>payment</code> table reference
	 */
	public Payment(Name alias) {
		this(alias, PAYMENT);
	}

	/**
	 * Create a <code>payment</code> table reference
	 */
	public Payment() {
		this(DSL.name("payment"), null);
	}

	public <O extends Record> Payment(Table<O> path, ForeignKey<O, PaymentRecord> childPath, InverseForeignKey<O, PaymentRecord> parentPath) {
		super(path, childPath, parentPath, PAYMENT);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class PaymentPath extends Payment implements Path<PaymentRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> PaymentPath(Table<O> path, ForeignKey<O, PaymentRecord> childPath, InverseForeignKey<O, PaymentRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private PaymentPath(Name alias, Table<PaymentRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public PaymentPath as(String alias) {
			return new PaymentPath(DSL.name(alias), this);
		}

		@Override
		public PaymentPath as(Name alias) {
			return new PaymentPath(alias, this);
		}

		@Override
		public PaymentPath as(Table<?> alias) {
			return new PaymentPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.PAYMENT_IDX_PAYMENT_DELETED);
	}

	@Override
	public Identity<PaymentRecord, Long> getIdentity() {
		return (Identity<PaymentRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<PaymentRecord> getPrimaryKey() {
		return Keys.KEY_PAYMENT_PRIMARY;
	}

	@Override
	public List<ForeignKey<PaymentRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_PAYMENT_PAYMENT_BATCH_FK, Keys.FK_PAYMENT_WORKFLOW_STATUS_FK);
	}

	private transient PaymentBatchPath _paymentBatch;

	/**
	 * Get the implicit join path to the <code>payment_batch</code> table.
	 */
	public PaymentBatchPath paymentBatch() {
		if (_paymentBatch == null)
			_paymentBatch = new PaymentBatchPath(this, Keys.FK_PAYMENT_PAYMENT_BATCH_FK, null);

		return _paymentBatch;
	}

	private transient WorkflowStatusPath _workflowStatus;

	/**
	 * Get the implicit join path to the <code>workflow_status</code> table.
	 */
	public WorkflowStatusPath workflowStatus() {
		if (_workflowStatus == null)
			_workflowStatus = new WorkflowStatusPath(this, Keys.FK_PAYMENT_WORKFLOW_STATUS_FK, null);

		return _workflowStatus;
	}

	private transient PaymentTargetPath _paymentTarget;

	/**
	 * Get the implicit to-many join path to the <code>payment_target</code> table
	 */
	public PaymentTargetPath paymentTarget() {
		if (_paymentTarget == null)
			_paymentTarget = new PaymentTargetPath(this, null, Keys.FK_PAYMENT_TARGET_PAYMENT_FK.getInverseKey());

		return _paymentTarget;
	}

	@Override
	public Payment as(String alias) {
		return new Payment(DSL.name(alias), this);
	}

	@Override
	public Payment as(Name alias) {
		return new Payment(alias, this);
	}

	@Override
	public Payment as(Table<?> alias) {
		return new Payment(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Payment rename(String name) {
		return new Payment(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Payment rename(Name name) {
		return new Payment(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Payment rename(Table<?> name) {
		return new Payment(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Payment where(Condition condition) {
		return new Payment(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Payment where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Payment where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Payment where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Payment where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Payment where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Payment where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Payment where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Payment whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Payment whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
