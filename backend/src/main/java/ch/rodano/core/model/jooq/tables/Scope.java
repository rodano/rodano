/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.helpers.configuration.StringScopeDataConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Dataset.DatasetPath;
import ch.rodano.core.model.jooq.tables.Event.EventPath;
import ch.rodano.core.model.jooq.tables.File.FilePath;
import ch.rodano.core.model.jooq.tables.Form.FormPath;
import ch.rodano.core.model.jooq.tables.Resource.ResourcePath;
import ch.rodano.core.model.jooq.tables.Role.RolePath;
import ch.rodano.core.model.jooq.tables.ScopeAudit.ScopeAuditPath;
import ch.rodano.core.model.jooq.tables.ScopeRelation.ScopeRelationPath;
import ch.rodano.core.model.jooq.tables.WorkflowStatus.WorkflowStatusPath;
import ch.rodano.core.model.jooq.tables.records.ScopeRecord;
import ch.rodano.core.model.scope.ScopeData;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Scope extends TableImpl<ScopeRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>scope</code>
	 */
	public static final Scope SCOPE = new Scope();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ScopeRecord> getRecordType() {
		return ScopeRecord.class;
	}

	/**
	 * The column <code>scope.pk</code>.
	 */
	public final TableField<ScopeRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>scope.id</code>.
	 */
	public final TableField<ScopeRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

	/**
	 * The column <code>scope.creation_time</code>.
	 */
	public final TableField<ScopeRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope.last_update_time</code>.
	 */
	public final TableField<ScopeRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope.deleted</code>.
	 */
	public final TableField<ScopeRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>scope.scope_model_id</code>.
	 */
	public final TableField<ScopeRecord, String> SCOPE_MODEL_ID = createField(DSL.name("scope_model_id"), SQLDataType.VARCHAR(64).nullable(false), this, "");

	/**
	 * The column <code>scope.code</code>.
	 */
	public final TableField<ScopeRecord, String> CODE = createField(DSL.name("code"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>scope.shortname</code>.
	 */
	public final TableField<ScopeRecord, String> SHORTNAME = createField(DSL.name("shortname"), SQLDataType.VARCHAR(256).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>scope.longname</code>.
	 */
	public final TableField<ScopeRecord, String> LONGNAME = createField(DSL.name("longname"), SQLDataType.VARCHAR(512).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>scope.start_date</code>.
	 */
	public final TableField<ScopeRecord, ZonedDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope.stop_date</code>.
	 */
	public final TableField<ScopeRecord, ZonedDateTime> STOP_DATE = createField(DSL.name("stop_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope.virtual</code>.
	 */
	public final TableField<ScopeRecord, Boolean> VIRTUAL = createField(DSL.name("virtual"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>scope.color</code>.
	 */
	public final TableField<ScopeRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(64).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>scope.expected_number</code>.
	 */
	public final TableField<ScopeRecord, Integer> EXPECTED_NUMBER = createField(DSL.name("expected_number"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

	/**
	 * The column <code>scope.max_number</code>.
	 */
	public final TableField<ScopeRecord, Integer> MAX_NUMBER = createField(DSL.name("max_number"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "");

	/**
	 * The column <code>scope.locked</code>.
	 */
	public final TableField<ScopeRecord, Boolean> LOCKED = createField(DSL.name("locked"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>scope.data</code>.
	 */
	public final TableField<ScopeRecord, ScopeData> DATA = createField(DSL.name("data"), SQLDataType.CLOB.nullable(false), this, "", new StringScopeDataConverter());

	private Scope(Name alias, Table<ScopeRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Scope(Name alias, Table<ScopeRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>scope</code> table reference
	 */
	public Scope(String alias) {
		this(DSL.name(alias), SCOPE);
	}

	/**
	 * Create an aliased <code>scope</code> table reference
	 */
	public Scope(Name alias) {
		this(alias, SCOPE);
	}

	/**
	 * Create a <code>scope</code> table reference
	 */
	public Scope() {
		this(DSL.name("scope"), null);
	}

	public <O extends Record> Scope(Table<O> path, ForeignKey<O, ScopeRecord> childPath, InverseForeignKey<O, ScopeRecord> parentPath) {
		super(path, childPath, parentPath, SCOPE);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class ScopePath extends Scope implements Path<ScopeRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> ScopePath(Table<O> path, ForeignKey<O, ScopeRecord> childPath, InverseForeignKey<O, ScopeRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private ScopePath(Name alias, Table<ScopeRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public ScopePath as(String alias) {
			return new ScopePath(DSL.name(alias), this);
		}

		@Override
		public ScopePath as(Name alias) {
			return new ScopePath(alias, this);
		}

		@Override
		public ScopePath as(Table<?> alias) {
			return new ScopePath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.SCOPE_IDX_SCOPE_DELETED);
	}

	@Override
	public Identity<ScopeRecord, Long> getIdentity() {
		return (Identity<ScopeRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ScopeRecord> getPrimaryKey() {
		return Keys.KEY_SCOPE_PRIMARY;
	}

	@Override
	public List<UniqueKey<ScopeRecord>> getUniqueKeys() {
		return Arrays.asList(Keys.KEY_SCOPE_U_SCOPE_CODE, Keys.KEY_SCOPE_U_SCOPE_ID);
	}

	private transient DatasetPath _dataset;

	/**
	 * Get the implicit to-many join path to the <code>dataset</code> table
	 */
	public DatasetPath dataset() {
		if (_dataset == null)
			_dataset = new DatasetPath(this, null, Keys.FK_DATASET_SCOPE_FK.getInverseKey());

		return _dataset;
	}

	private transient EventPath _event;

	/**
	 * Get the implicit to-many join path to the <code>event</code> table
	 */
	public EventPath event() {
		if (_event == null)
			_event = new EventPath(this, null, Keys.FK_EVENT_SCOPE_FK.getInverseKey());

		return _event;
	}

	private transient FilePath _file;

	/**
	 * Get the implicit to-many join path to the <code>file</code> table
	 */
	public FilePath file() {
		if (_file == null)
			_file = new FilePath(this, null, Keys.FK_FILE_SCOPE_FK.getInverseKey());

		return _file;
	}

	private transient FormPath _form;

	/**
	 * Get the implicit to-many join path to the <code>form</code> table
	 */
	public FormPath form() {
		if (_form == null)
			_form = new FormPath(this, null, Keys.FK_FORM_SCOPE_FK.getInverseKey());

		return _form;
	}

	private transient ResourcePath _resource;

	/**
	 * Get the implicit to-many join path to the <code>resource</code> table
	 */
	public ResourcePath resource() {
		if (_resource == null)
			_resource = new ResourcePath(this, null, Keys.FK_RESOURCE_SCOPE_FK.getInverseKey());

		return _resource;
	}

	private transient RolePath _role;

	/**
	 * Get the implicit to-many join path to the <code>role</code> table
	 */
	public RolePath role() {
		if (_role == null)
			_role = new RolePath(this, null, Keys.FK_ROLE_SCOPE_FK.getInverseKey());

		return _role;
	}

	private transient ScopeAuditPath _scopeAudit;

	/**
	 * Get the implicit to-many join path to the <code>scope_audit</code> table
	 */
	public ScopeAuditPath scopeAudit() {
		if (_scopeAudit == null)
			_scopeAudit = new ScopeAuditPath(this, null, Keys.FK_SCOPE_AUDIT_OBJECT_FK.getInverseKey());

		return _scopeAudit;
	}

	private transient ScopeRelationPath _fkScopeRelationParentFk;

	/**
	 * Get the implicit to-many join path to the <code>scope_relation</code> table,
	 * via the <code>fk_scope_relation_parent_fk</code> key
	 */
	public ScopeRelationPath fkScopeRelationParentFk() {
		if (_fkScopeRelationParentFk == null)
			_fkScopeRelationParentFk = new ScopeRelationPath(this, null, Keys.FK_SCOPE_RELATION_PARENT_FK.getInverseKey());

		return _fkScopeRelationParentFk;
	}

	private transient ScopeRelationPath _fkScopeRelationScopeFk;

	/**
	 * Get the implicit to-many join path to the <code>scope_relation</code> table,
	 * via the <code>fk_scope_relation_scope_fk</code> key
	 */
	public ScopeRelationPath fkScopeRelationScopeFk() {
		if (_fkScopeRelationScopeFk == null)
			_fkScopeRelationScopeFk = new ScopeRelationPath(this, null, Keys.FK_SCOPE_RELATION_SCOPE_FK.getInverseKey());

		return _fkScopeRelationScopeFk;
	}

	private transient WorkflowStatusPath _workflowStatus;

	/**
	 * Get the implicit to-many join path to the <code>workflow_status</code> table
	 */
	public WorkflowStatusPath workflowStatus() {
		if (_workflowStatus == null)
			_workflowStatus = new WorkflowStatusPath(this, null, Keys.FK_WORKFLOW_STATUS_SCOPE_FK.getInverseKey());

		return _workflowStatus;
	}

	@Override
	public Scope as(String alias) {
		return new Scope(DSL.name(alias), this);
	}

	@Override
	public Scope as(Name alias) {
		return new Scope(alias, this);
	}

	@Override
	public Scope as(Table<?> alias) {
		return new Scope(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Scope rename(String name) {
		return new Scope(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Scope rename(Name name) {
		return new Scope(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Scope rename(Table<?> name) {
		return new Scope(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Scope where(Condition condition) {
		return new Scope(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Scope where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Scope where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Scope where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Scope where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Scope where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Scope where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Scope where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Scope whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Scope whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
