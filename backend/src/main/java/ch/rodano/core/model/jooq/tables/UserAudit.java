/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.AuditAction.AuditActionPath;
import ch.rodano.core.model.jooq.tables.Robot.RobotPath;
import ch.rodano.core.model.jooq.tables.User.UserPath;
import ch.rodano.core.model.jooq.tables.records.UserAuditRecord;
import ch.rodano.core.model.jooqutils.AuditTable;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UserAudit extends TableImpl<UserAuditRecord> implements AuditTable {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>user_audit</code>
	 */
	public static final UserAudit USER_AUDIT = new UserAudit();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<UserAuditRecord> getRecordType() {
		return UserAuditRecord.class;
	}

	/**
	 * The column <code>user_audit.pk</code>.
	 */
	public final TableField<UserAuditRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>user_audit.audit_action_fk</code>.
	 */
	public final TableField<UserAuditRecord, Long> AUDIT_ACTION_FK = createField(DSL.name("audit_action_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>user_audit.audit_datetime</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> AUDIT_DATETIME = createField(DSL.name("audit_datetime"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.audit_actor</code>.
	 */
	public final TableField<UserAuditRecord, String> AUDIT_ACTOR = createField(DSL.name("audit_actor"), SQLDataType.VARCHAR(200).nullable(false), this, "");

	/**
	 * The column <code>user_audit.audit_user_fk</code>.
	 */
	public final TableField<UserAuditRecord, Long> AUDIT_USER_FK = createField(DSL.name("audit_user_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>user_audit.audit_robot_fk</code>.
	 */
	public final TableField<UserAuditRecord, Long> AUDIT_ROBOT_FK = createField(DSL.name("audit_robot_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>user_audit.audit_context</code>.
	 */
	public final TableField<UserAuditRecord, String> AUDIT_CONTEXT = createField(DSL.name("audit_context"), SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>user_audit.audit_object_fk</code>.
	 */
	public final TableField<UserAuditRecord, Long> AUDIT_OBJECT_FK = createField(DSL.name("audit_object_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>user_audit.deleted</code>.
	 */
	public final TableField<UserAuditRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>user_audit.name</code>.
	 */
	public final TableField<UserAuditRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(400).nullable(false), this, "");

	/**
	 * The column <code>user_audit.email</code>.
	 */
	public final TableField<UserAuditRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.VARCHAR(200).nullable(false), this, "");

	/**
	 * The column <code>user_audit.externally_managed</code>.
	 */
	public final TableField<UserAuditRecord, Boolean> EXTERNALLY_MANAGED = createField(DSL.name("externally_managed"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>user_audit.activated</code>.
	 */
	public final TableField<UserAuditRecord, Boolean> ACTIVATED = createField(DSL.name("activated"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>user_audit.activation_code</code>.
	 */
	public final TableField<UserAuditRecord, String> ACTIVATION_CODE = createField(DSL.name("activation_code"), SQLDataType.CHAR(36).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "");

	/**
	 * The column <code>user_audit.recovery_code</code>.
	 */
	public final TableField<UserAuditRecord, String> RECOVERY_CODE = createField(DSL.name("recovery_code"), SQLDataType.CHAR(36).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "");

	/**
	 * The column <code>user_audit.pending_email</code>.
	 */
	public final TableField<UserAuditRecord, String> PENDING_EMAIL = createField(DSL.name("pending_email"), SQLDataType.VARCHAR(200).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>user_audit.email_modification_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> EMAIL_MODIFICATION_DATE = createField(DSL.name("email_modification_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.email_verification_code</code>.
	 */
	public final TableField<UserAuditRecord, String> EMAIL_VERIFICATION_CODE = createField(DSL.name("email_verification_code"), SQLDataType.CHAR(36).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "");

	/**
	 * The column <code>user_audit.password</code>.
	 */
	public final TableField<UserAuditRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(60).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>user_audit.password_changed_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> PASSWORD_CHANGED_DATE = createField(DSL.name("password_changed_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.previous_passwords</code>.
	 */
	public final TableField<UserAuditRecord, String> PREVIOUS_PASSWORDS = createField(DSL.name("previous_passwords"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

	/**
	 * The column <code>user_audit.password_attempts</code>.
	 */
	public final TableField<UserAuditRecord, Integer> PASSWORD_ATTEMPTS = createField(DSL.name("password_attempts"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

	/**
	 * The column <code>user_audit.password_reset_code</code>.
	 */
	public final TableField<UserAuditRecord, String> PASSWORD_RESET_CODE = createField(DSL.name("password_reset_code"), SQLDataType.CHAR(36).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CHAR)), this, "");

	/**
	 * The column <code>user_audit.password_reset_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> PASSWORD_RESET_DATE = createField(DSL.name("password_reset_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.login_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> LOGIN_DATE = createField(DSL.name("login_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.previous_login_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> PREVIOUS_LOGIN_DATE = createField(DSL.name("previous_login_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.logout_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> LOGOUT_DATE = createField(DSL.name("logout_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.login_blocking_date</code>.
	 */
	public final TableField<UserAuditRecord, ZonedDateTime> LOGIN_BLOCKING_DATE = createField(DSL.name("login_blocking_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>user_audit.should_change_password</code>.
	 */
	public final TableField<UserAuditRecord, Boolean> SHOULD_CHANGE_PASSWORD = createField(DSL.name("should_change_password"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>user_audit.phone</code>.
	 */
	public final TableField<UserAuditRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(50).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>user_audit.language_id</code>.
	 */
	public final TableField<UserAuditRecord, String> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.VARCHAR(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>user_audit.user_agent</code>.
	 */
	public final TableField<UserAuditRecord, String> USER_AGENT = createField(DSL.name("user_agent"), SQLDataType.VARCHAR(500).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	private UserAudit(Name alias, Table<UserAuditRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private UserAudit(Name alias, Table<UserAuditRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>user_audit</code> table reference
	 */
	public UserAudit(String alias) {
		this(DSL.name(alias), USER_AUDIT);
	}

	/**
	 * Create an aliased <code>user_audit</code> table reference
	 */
	public UserAudit(Name alias) {
		this(alias, USER_AUDIT);
	}

	/**
	 * Create a <code>user_audit</code> table reference
	 */
	public UserAudit() {
		this(DSL.name("user_audit"), null);
	}

	public <O extends Record> UserAudit(Table<O> path, ForeignKey<O, UserAuditRecord> childPath, InverseForeignKey<O, UserAuditRecord> parentPath) {
		super(path, childPath, parentPath, USER_AUDIT);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class UserAuditPath extends UserAudit implements Path<UserAuditRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> UserAuditPath(Table<O> path, ForeignKey<O, UserAuditRecord> childPath, InverseForeignKey<O, UserAuditRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private UserAuditPath(Name alias, Table<UserAuditRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public UserAuditPath as(String alias) {
			return new UserAuditPath(DSL.name(alias), this);
		}

		@Override
		public UserAuditPath as(Name alias) {
			return new UserAuditPath(alias, this);
		}

		@Override
		public UserAuditPath as(Table<?> alias) {
			return new UserAuditPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<UserAuditRecord, Long> getIdentity() {
		return (Identity<UserAuditRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<UserAuditRecord> getPrimaryKey() {
		return Keys.KEY_USER_AUDIT_PRIMARY;
	}

	@Override
	public List<ForeignKey<UserAuditRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_USER_AUDIT_AUDIT_OBJECT_FK, Keys.FK_USER_AUDIT_ROBOT_FK, Keys.FK_USER_AUDIT_USER_FK, Keys.FK_USER_TRAIL_AUDIT_ACTION_FK);
	}

	private transient UserPath _fkUserAuditAuditObjectFk;

	/**
	 * Get the implicit join path to the <code>user</code> table, via the
	 * <code>fk_user_audit_audit_object_fk</code> key.
	 */
	public UserPath fkUserAuditAuditObjectFk() {
		if (_fkUserAuditAuditObjectFk == null)
			_fkUserAuditAuditObjectFk = new UserPath(this, Keys.FK_USER_AUDIT_AUDIT_OBJECT_FK, null);

		return _fkUserAuditAuditObjectFk;
	}

	private transient RobotPath _robot;

	/**
	 * Get the implicit join path to the <code>robot</code> table.
	 */
	public RobotPath robot() {
		if (_robot == null)
			_robot = new RobotPath(this, Keys.FK_USER_AUDIT_ROBOT_FK, null);

		return _robot;
	}

	private transient UserPath _fkUserAuditUserFk;

	/**
	 * Get the implicit join path to the <code>user</code> table, via the
	 * <code>fk_user_audit_user_fk</code> key.
	 */
	public UserPath fkUserAuditUserFk() {
		if (_fkUserAuditUserFk == null)
			_fkUserAuditUserFk = new UserPath(this, Keys.FK_USER_AUDIT_USER_FK, null);

		return _fkUserAuditUserFk;
	}

	private transient AuditActionPath _auditAction;

	/**
	 * Get the implicit join path to the <code>audit_action</code> table.
	 */
	public AuditActionPath auditAction() {
		if (_auditAction == null)
			_auditAction = new AuditActionPath(this, Keys.FK_USER_TRAIL_AUDIT_ACTION_FK, null);

		return _auditAction;
	}

	@Override
	public UserAudit as(String alias) {
		return new UserAudit(DSL.name(alias), this);
	}

	@Override
	public UserAudit as(Name alias) {
		return new UserAudit(alias, this);
	}

	@Override
	public UserAudit as(Table<?> alias) {
		return new UserAudit(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public UserAudit rename(String name) {
		return new UserAudit(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public UserAudit rename(Name name) {
		return new UserAudit(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public UserAudit rename(Table<?> name) {
		return new UserAudit(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public UserAudit where(Condition condition) {
		return new UserAudit(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public UserAudit where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public UserAudit where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public UserAudit where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public UserAudit where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public UserAudit where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public UserAudit where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public UserAudit where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public UserAudit whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public UserAudit whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
