/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Robot.RobotPath;
import ch.rodano.core.model.jooq.tables.RoleAudit.RoleAuditPath;
import ch.rodano.core.model.jooq.tables.Scope.ScopePath;
import ch.rodano.core.model.jooq.tables.User.UserPath;
import ch.rodano.core.model.jooq.tables.records.RoleRecord;
import ch.rodano.core.model.role.RoleStatus;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Role extends TableImpl<RoleRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>role</code>
	 */
	public static final Role ROLE = new Role();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RoleRecord> getRecordType() {
		return RoleRecord.class;
	}

	/**
	 * The column <code>role.pk</code>.
	 */
	public final TableField<RoleRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>role.creation_time</code>.
	 */
	public final TableField<RoleRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>role.last_update_time</code>.
	 */
	public final TableField<RoleRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>role.user_fk</code>.
	 */
	public final TableField<RoleRecord, Long> USER_FK = createField(DSL.name("user_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>role.robot_fk</code>.
	 */
	public final TableField<RoleRecord, Long> ROBOT_FK = createField(DSL.name("robot_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>role.scope_fk</code>.
	 */
	public final TableField<RoleRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>role.profile_id</code>.
	 */
	public final TableField<RoleRecord, String> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.VARCHAR(50).nullable(false), this, "");

	/**
	 * The column <code>role.status</code>.
	 */
	public final TableField<RoleRecord, RoleStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(50).nullable(false), this, "", new EnumConverter<String, RoleStatus>(String.class, RoleStatus.class));

	private Role(Name alias, Table<RoleRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Role(Name alias, Table<RoleRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>role</code> table reference
	 */
	public Role(String alias) {
		this(DSL.name(alias), ROLE);
	}

	/**
	 * Create an aliased <code>role</code> table reference
	 */
	public Role(Name alias) {
		this(alias, ROLE);
	}

	/**
	 * Create a <code>role</code> table reference
	 */
	public Role() {
		this(DSL.name("role"), null);
	}

	public <O extends Record> Role(Table<O> path, ForeignKey<O, RoleRecord> childPath, InverseForeignKey<O, RoleRecord> parentPath) {
		super(path, childPath, parentPath, ROLE);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class RolePath extends Role implements Path<RoleRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> RolePath(Table<O> path, ForeignKey<O, RoleRecord> childPath, InverseForeignKey<O, RoleRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private RolePath(Name alias, Table<RoleRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public RolePath as(String alias) {
			return new RolePath(DSL.name(alias), this);
		}

		@Override
		public RolePath as(Name alias) {
			return new RolePath(alias, this);
		}

		@Override
		public RolePath as(Table<?> alias) {
			return new RolePath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.ROLE_IDX_ROLE_PROFILE_ID);
	}

	@Override
	public Identity<RoleRecord, Long> getIdentity() {
		return (Identity<RoleRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<RoleRecord> getPrimaryKey() {
		return Keys.KEY_ROLE_PRIMARY;
	}

	@Override
	public List<ForeignKey<RoleRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_ROLE_ROBOT_FK, Keys.FK_ROLE_SCOPE_FK, Keys.FK_ROLE_USER_FK);
	}

	private transient RobotPath _robot;

	/**
	 * Get the implicit join path to the <code>robot</code> table.
	 */
	public RobotPath robot() {
		if (_robot == null)
			_robot = new RobotPath(this, Keys.FK_ROLE_ROBOT_FK, null);

		return _robot;
	}

	private transient ScopePath _scope;

	/**
	 * Get the implicit join path to the <code>scope</code> table.
	 */
	public ScopePath scope() {
		if (_scope == null)
			_scope = new ScopePath(this, Keys.FK_ROLE_SCOPE_FK, null);

		return _scope;
	}

	private transient UserPath _user;

	/**
	 * Get the implicit join path to the <code>user</code> table.
	 */
	public UserPath user() {
		if (_user == null)
			_user = new UserPath(this, Keys.FK_ROLE_USER_FK, null);

		return _user;
	}

	private transient RoleAuditPath _roleAudit;

	/**
	 * Get the implicit to-many join path to the <code>role_audit</code> table
	 */
	public RoleAuditPath roleAudit() {
		if (_roleAudit == null)
			_roleAudit = new RoleAuditPath(this, null, Keys.FK_ROLE_AUDIT_AUDIT_OBJECT_FK.getInverseKey());

		return _roleAudit;
	}

	@Override
	public Role as(String alias) {
		return new Role(DSL.name(alias), this);
	}

	@Override
	public Role as(Name alias) {
		return new Role(alias, this);
	}

	@Override
	public Role as(Table<?> alias) {
		return new Role(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Role rename(String name) {
		return new Role(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Role rename(Name name) {
		return new Role(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Role rename(Table<?> name) {
		return new Role(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Condition condition) {
		return new Role(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Role where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Role whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
