/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Dataset.DatasetPath;
import ch.rodano.core.model.jooq.tables.FieldAudit.FieldAuditPath;
import ch.rodano.core.model.jooq.tables.File.FilePath;
import ch.rodano.core.model.jooq.tables.WorkflowStatus.WorkflowStatusPath;
import ch.rodano.core.model.jooq.tables.records.FieldRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Field extends TableImpl<FieldRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>field</code>
	 */
	public static final Field FIELD = new Field();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FieldRecord> getRecordType() {
		return FieldRecord.class;
	}

	/**
	 * The column <code>field.pk</code>.
	 */
	public final TableField<FieldRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>field.creation_time</code>.
	 */
	public final TableField<FieldRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>field.last_update_time</code>.
	 */
	public final TableField<FieldRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>field.dataset_fk</code>.
	 */
	public final TableField<FieldRecord, Long> DATASET_FK = createField(DSL.name("dataset_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>field.dataset_model_id</code>.
	 */
	public final TableField<FieldRecord, String> DATASET_MODEL_ID = createField(DSL.name("dataset_model_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>field.field_model_id</code>.
	 */
	public final TableField<FieldRecord, String> FIELD_MODEL_ID = createField(DSL.name("field_model_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>field.value</code>.
	 */
	public final TableField<FieldRecord, String> VALUE = createField(DSL.name("value"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

	private Field(Name alias, Table<FieldRecord> aliased) {
		this(alias, aliased, (org.jooq.Field<?>[]) null, null);
	}

	private Field(Name alias, Table<FieldRecord> aliased, org.jooq.Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>field</code> table reference
	 */
	public Field(String alias) {
		this(DSL.name(alias), FIELD);
	}

	/**
	 * Create an aliased <code>field</code> table reference
	 */
	public Field(Name alias) {
		this(alias, FIELD);
	}

	/**
	 * Create a <code>field</code> table reference
	 */
	public Field() {
		this(DSL.name("field"), null);
	}

	public <O extends Record> Field(Table<O> path, ForeignKey<O, FieldRecord> childPath, InverseForeignKey<O, FieldRecord> parentPath) {
		super(path, childPath, parentPath, FIELD);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class FieldPath extends Field implements Path<FieldRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> FieldPath(Table<O> path, ForeignKey<O, FieldRecord> childPath, InverseForeignKey<O, FieldRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private FieldPath(Name alias, Table<FieldRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public FieldPath as(String alias) {
			return new FieldPath(DSL.name(alias), this);
		}

		@Override
		public FieldPath as(Name alias) {
			return new FieldPath(alias, this);
		}

		@Override
		public FieldPath as(Table<?> alias) {
			return new FieldPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<FieldRecord, Long> getIdentity() {
		return (Identity<FieldRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<FieldRecord> getPrimaryKey() {
		return Keys.KEY_FIELD_PRIMARY;
	}

	@Override
	public List<ForeignKey<FieldRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_FIELD_DATASET_FK);
	}

	private transient DatasetPath _dataset;

	/**
	 * Get the implicit join path to the <code>dataset</code> table.
	 */
	public DatasetPath dataset() {
		if (_dataset == null)
			_dataset = new DatasetPath(this, Keys.FK_FIELD_DATASET_FK, null);

		return _dataset;
	}

	private transient FieldAuditPath _fieldAudit;

	/**
	 * Get the implicit to-many join path to the <code>field_audit</code> table
	 */
	public FieldAuditPath fieldAudit() {
		if (_fieldAudit == null)
			_fieldAudit = new FieldAuditPath(this, null, Keys.FK_FIELD_AUDIT_OBJECT_FK.getInverseKey());

		return _fieldAudit;
	}

	private transient FilePath _file;

	/**
	 * Get the implicit to-many join path to the <code>file</code> table
	 */
	public FilePath file() {
		if (_file == null)
			_file = new FilePath(this, null, Keys.FK_FILE_FIELD_FK.getInverseKey());

		return _file;
	}

	private transient WorkflowStatusPath _workflowStatus;

	/**
	 * Get the implicit to-many join path to the <code>workflow_status</code> table
	 */
	public WorkflowStatusPath workflowStatus() {
		if (_workflowStatus == null)
			_workflowStatus = new WorkflowStatusPath(this, null, Keys.FK_WORKFLOW_STATUS_FIELD_FK.getInverseKey());

		return _workflowStatus;
	}

	@Override
	public Field as(String alias) {
		return new Field(DSL.name(alias), this);
	}

	@Override
	public Field as(Name alias) {
		return new Field(alias, this);
	}

	@Override
	public Field as(Table<?> alias) {
		return new Field(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Field rename(String name) {
		return new Field(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Field rename(Name name) {
		return new Field(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Field rename(Table<?> name) {
		return new Field(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Field where(Condition condition) {
		return new Field(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Field where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Field where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Field where(org.jooq.Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Field where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Field where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Field where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Field where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Field whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Field whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
