/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.records.ChartColorRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChartColor extends TableImpl<ChartColorRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>chart_color</code>
	 */
	public static final ChartColor CHART_COLOR = new ChartColor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ChartColorRecord> getRecordType() {
		return ChartColorRecord.class;
	}

	/**
	 * The column <code>chart_color.pk</code>.
	 */
	public final TableField<ChartColorRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>chart_color.chart_fk</code>.
	 */
	public final TableField<ChartColorRecord, Long> CHART_FK = createField(DSL.name("chart_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>chart_color.color_order</code>.
	 */
	public final TableField<ChartColorRecord, Integer> COLOR_ORDER = createField(DSL.name("color_order"), SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>chart_color.color</code>.
	 */
	public final TableField<ChartColorRecord, String> COLOR = createField(DSL.name("color"), SQLDataType.VARCHAR(20).nullable(false), this, "");

	private ChartColor(Name alias, Table<ChartColorRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private ChartColor(Name alias, Table<ChartColorRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>chart_color</code> table reference
	 */
	public ChartColor(String alias) {
		this(DSL.name(alias), CHART_COLOR);
	}

	/**
	 * Create an aliased <code>chart_color</code> table reference
	 */
	public ChartColor(Name alias) {
		this(alias, CHART_COLOR);
	}

	/**
	 * Create a <code>chart_color</code> table reference
	 */
	public ChartColor() {
		this(DSL.name("chart_color"), null);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<ChartColorRecord, Long> getIdentity() {
		return (Identity<ChartColorRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ChartColorRecord> getPrimaryKey() {
		return Keys.KEY_CHART_COLOR_PRIMARY;
	}

	@Override
	public ChartColor as(String alias) {
		return new ChartColor(DSL.name(alias), this);
	}

	@Override
	public ChartColor as(Name alias) {
		return new ChartColor(alias, this);
	}

	@Override
	public ChartColor as(Table<?> alias) {
		return new ChartColor(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ChartColor rename(String name) {
		return new ChartColor(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ChartColor rename(Name name) {
		return new ChartColor(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ChartColor rename(Table<?> name) {
		return new ChartColor(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartColor where(Condition condition) {
		return new ChartColor(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartColor where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartColor where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartColor where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartColor where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartColor where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartColor where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartColor where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartColor whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartColor whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
