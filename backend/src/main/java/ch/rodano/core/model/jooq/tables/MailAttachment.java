/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Mail.MailPath;
import ch.rodano.core.model.jooq.tables.records.MailAttachmentRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class MailAttachment extends TableImpl<MailAttachmentRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>mail_attachment</code>
	 */
	public static final MailAttachment MAIL_ATTACHMENT = new MailAttachment();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MailAttachmentRecord> getRecordType() {
		return MailAttachmentRecord.class;
	}

	/**
	 * The column <code>mail_attachment.pk</code>.
	 */
	public final TableField<MailAttachmentRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>mail_attachment.creation_time</code>.
	 */
	public final TableField<MailAttachmentRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>mail_attachment.last_update_time</code>.
	 */
	public final TableField<MailAttachmentRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>mail_attachment.mail_fk</code>.
	 */
	public final TableField<MailAttachmentRecord, Long> MAIL_FK = createField(DSL.name("mail_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>mail_attachment.filename</code>.
	 */
	public final TableField<MailAttachmentRecord, String> FILENAME = createField(DSL.name("filename"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>mail_attachment.content</code>.
	 */
	public final TableField<MailAttachmentRecord, byte[]> CONTENT = createField(DSL.name("content"), SQLDataType.BLOB.nullable(false), this, "");

	private MailAttachment(Name alias, Table<MailAttachmentRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private MailAttachment(Name alias, Table<MailAttachmentRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>mail_attachment</code> table reference
	 */
	public MailAttachment(String alias) {
		this(DSL.name(alias), MAIL_ATTACHMENT);
	}

	/**
	 * Create an aliased <code>mail_attachment</code> table reference
	 */
	public MailAttachment(Name alias) {
		this(alias, MAIL_ATTACHMENT);
	}

	/**
	 * Create a <code>mail_attachment</code> table reference
	 */
	public MailAttachment() {
		this(DSL.name("mail_attachment"), null);
	}

	public <O extends Record> MailAttachment(Table<O> path, ForeignKey<O, MailAttachmentRecord> childPath, InverseForeignKey<O, MailAttachmentRecord> parentPath) {
		super(path, childPath, parentPath, MAIL_ATTACHMENT);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class MailAttachmentPath extends MailAttachment implements Path<MailAttachmentRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> MailAttachmentPath(Table<O> path, ForeignKey<O, MailAttachmentRecord> childPath, InverseForeignKey<O, MailAttachmentRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private MailAttachmentPath(Name alias, Table<MailAttachmentRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public MailAttachmentPath as(String alias) {
			return new MailAttachmentPath(DSL.name(alias), this);
		}

		@Override
		public MailAttachmentPath as(Name alias) {
			return new MailAttachmentPath(alias, this);
		}

		@Override
		public MailAttachmentPath as(Table<?> alias) {
			return new MailAttachmentPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<MailAttachmentRecord, Long> getIdentity() {
		return (Identity<MailAttachmentRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<MailAttachmentRecord> getPrimaryKey() {
		return Keys.KEY_MAIL_ATTACHMENT_PRIMARY;
	}

	@Override
	public List<ForeignKey<MailAttachmentRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_MAIL_ATTACHMENT_MAIL_FK);
	}

	private transient MailPath _mail;

	/**
	 * Get the implicit join path to the <code>mail</code> table.
	 */
	public MailPath mail() {
		if (_mail == null)
			_mail = new MailPath(this, Keys.FK_MAIL_ATTACHMENT_MAIL_FK, null);

		return _mail;
	}

	@Override
	public MailAttachment as(String alias) {
		return new MailAttachment(DSL.name(alias), this);
	}

	@Override
	public MailAttachment as(Name alias) {
		return new MailAttachment(alias, this);
	}

	@Override
	public MailAttachment as(Table<?> alias) {
		return new MailAttachment(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public MailAttachment rename(String name) {
		return new MailAttachment(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public MailAttachment rename(Name name) {
		return new MailAttachment(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public MailAttachment rename(Table<?> name) {
		return new MailAttachment(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public MailAttachment where(Condition condition) {
		return new MailAttachment(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public MailAttachment where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public MailAttachment where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public MailAttachment where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public MailAttachment where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public MailAttachment where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public MailAttachment where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public MailAttachment where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public MailAttachment whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public MailAttachment whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
