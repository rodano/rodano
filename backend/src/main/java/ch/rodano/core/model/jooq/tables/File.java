/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Dataset.DatasetPath;
import ch.rodano.core.model.jooq.tables.Event.EventPath;
import ch.rodano.core.model.jooq.tables.Field.FieldPath;
import ch.rodano.core.model.jooq.tables.Scope.ScopePath;
import ch.rodano.core.model.jooq.tables.User.UserPath;
import ch.rodano.core.model.jooq.tables.records.FileRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class File extends TableImpl<FileRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>file</code>
	 */
	public static final File FILE = new File();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FileRecord> getRecordType() {
		return FileRecord.class;
	}

	/**
	 * The column <code>file.pk</code>.
	 */
	public final TableField<FileRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>file.creation_time</code>.
	 */
	public final TableField<FileRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>file.last_update_time</code>.
	 */
	public final TableField<FileRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>file.scope_fk</code>.
	 */
	public final TableField<FileRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>file.event_fk</code>.
	 */
	public final TableField<FileRecord, Long> EVENT_FK = createField(DSL.name("event_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>file.dataset_fk</code>.
	 */
	public final TableField<FileRecord, Long> DATASET_FK = createField(DSL.name("dataset_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>file.field_fk</code>.
	 */
	public final TableField<FileRecord, Long> FIELD_FK = createField(DSL.name("field_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>file.trail_fk</code>.
	 */
	public final TableField<FileRecord, Long> TRAIL_FK = createField(DSL.name("trail_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>file.user_fk</code>.
	 */
	public final TableField<FileRecord, Long> USER_FK = createField(DSL.name("user_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>file.uuid</code>.
	 */
	public final TableField<FileRecord, String> UUID = createField(DSL.name("uuid"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>file.name</code>.
	 */
	public final TableField<FileRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>file.checksum</code>.
	 */
	public final TableField<FileRecord, byte[]> CHECKSUM = createField(DSL.name("checksum"), SQLDataType.VARBINARY(40).nullable(false), this, "");

	/**
	 * The column <code>file.submitted</code>.
	 */
	public final TableField<FileRecord, Boolean> SUBMITTED = createField(DSL.name("submitted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	private File(Name alias, Table<FileRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private File(Name alias, Table<FileRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>file</code> table reference
	 */
	public File(String alias) {
		this(DSL.name(alias), FILE);
	}

	/**
	 * Create an aliased <code>file</code> table reference
	 */
	public File(Name alias) {
		this(alias, FILE);
	}

	/**
	 * Create a <code>file</code> table reference
	 */
	public File() {
		this(DSL.name("file"), null);
	}

	public <O extends Record> File(Table<O> path, ForeignKey<O, FileRecord> childPath, InverseForeignKey<O, FileRecord> parentPath) {
		super(path, childPath, parentPath, FILE);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class FilePath extends File implements Path<FileRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> FilePath(Table<O> path, ForeignKey<O, FileRecord> childPath, InverseForeignKey<O, FileRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private FilePath(Name alias, Table<FileRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public FilePath as(String alias) {
			return new FilePath(DSL.name(alias), this);
		}

		@Override
		public FilePath as(Name alias) {
			return new FilePath(alias, this);
		}

		@Override
		public FilePath as(Table<?> alias) {
			return new FilePath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<FileRecord, Long> getIdentity() {
		return (Identity<FileRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<FileRecord> getPrimaryKey() {
		return Keys.KEY_FILE_PRIMARY;
	}

	@Override
	public List<UniqueKey<FileRecord>> getUniqueKeys() {
		return Arrays.asList(Keys.KEY_FILE_U_UUID);
	}

	@Override
	public List<ForeignKey<FileRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_FILE_DATASET_FK, Keys.FK_FILE_EVENT_FK, Keys.FK_FILE_FIELD_FK, Keys.FK_FILE_SCOPE_FK, Keys.FK_FILE_USER_FK);
	}

	private transient DatasetPath _dataset;

	/**
	 * Get the implicit join path to the <code>dataset</code> table.
	 */
	public DatasetPath dataset() {
		if (_dataset == null)
			_dataset = new DatasetPath(this, Keys.FK_FILE_DATASET_FK, null);

		return _dataset;
	}

	private transient EventPath _event;

	/**
	 * Get the implicit join path to the <code>event</code> table.
	 */
	public EventPath event() {
		if (_event == null)
			_event = new EventPath(this, Keys.FK_FILE_EVENT_FK, null);

		return _event;
	}

	private transient FieldPath _field;

	/**
	 * Get the implicit join path to the <code>field</code> table.
	 */
	public FieldPath field() {
		if (_field == null)
			_field = new FieldPath(this, Keys.FK_FILE_FIELD_FK, null);

		return _field;
	}

	private transient ScopePath _scope;

	/**
	 * Get the implicit join path to the <code>scope</code> table.
	 */
	public ScopePath scope() {
		if (_scope == null)
			_scope = new ScopePath(this, Keys.FK_FILE_SCOPE_FK, null);

		return _scope;
	}

	private transient UserPath _user;

	/**
	 * Get the implicit join path to the <code>user</code> table.
	 */
	public UserPath user() {
		if (_user == null)
			_user = new UserPath(this, Keys.FK_FILE_USER_FK, null);

		return _user;
	}

	@Override
	public File as(String alias) {
		return new File(DSL.name(alias), this);
	}

	@Override
	public File as(Name alias) {
		return new File(alias, this);
	}

	@Override
	public File as(Table<?> alias) {
		return new File(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public File rename(String name) {
		return new File(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public File rename(Name name) {
		return new File(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public File rename(Table<?> name) {
		return new File(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public File where(Condition condition) {
		return new File(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public File where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public File where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public File where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public File where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public File where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public File where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public File where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public File whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public File whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
