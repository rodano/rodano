/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables.records;


import ch.rodano.core.model.jooq.tables.Event;

import java.time.ZonedDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class EventRecord extends UpdatableRecordImpl<EventRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * Setter for <code>event.pk</code>.
	 */
	public void setPk(Long value) {
		set(0, value);
	}

	/**
	 * Getter for <code>event.pk</code>.
	 */
	public Long getPk() {
		return (Long) get(0);
	}

	/**
	 * Setter for <code>event.id</code>.
	 */
	public void setId(String value) {
		set(1, value);
	}

	/**
	 * Getter for <code>event.id</code>.
	 */
	public String getId() {
		return (String) get(1);
	}

	/**
	 * Setter for <code>event.creation_time</code>.
	 */
	public void setCreationTime(ZonedDateTime value) {
		set(2, value);
	}

	/**
	 * Getter for <code>event.creation_time</code>.
	 */
	public ZonedDateTime getCreationTime() {
		return (ZonedDateTime) get(2);
	}

	/**
	 * Setter for <code>event.last_update_time</code>.
	 */
	public void setLastUpdateTime(ZonedDateTime value) {
		set(3, value);
	}

	/**
	 * Getter for <code>event.last_update_time</code>.
	 */
	public ZonedDateTime getLastUpdateTime() {
		return (ZonedDateTime) get(3);
	}

	/**
	 * Setter for <code>event.deleted</code>.
	 */
	public void setDeleted(Boolean value) {
		set(4, value);
	}

	/**
	 * Getter for <code>event.deleted</code>.
	 */
	public Boolean getDeleted() {
		return (Boolean) get(4);
	}

	/**
	 * Setter for <code>event.scope_fk</code>.
	 */
	public void setScopeFk(Long value) {
		set(5, value);
	}

	/**
	 * Getter for <code>event.scope_fk</code>.
	 */
	public Long getScopeFk() {
		return (Long) get(5);
	}

	/**
	 * Setter for <code>event.scope_model_id</code>.
	 */
	public void setScopeModelId(String value) {
		set(6, value);
	}

	/**
	 * Getter for <code>event.scope_model_id</code>.
	 */
	public String getScopeModelId() {
		return (String) get(6);
	}

	/**
	 * Setter for <code>event.event_group_number</code>.
	 */
	public void setEventGroupNumber(Integer value) {
		set(7, value);
	}

	/**
	 * Getter for <code>event.event_group_number</code>.
	 */
	public Integer getEventGroupNumber() {
		return (Integer) get(7);
	}

	/**
	 * Setter for <code>event.event_model_id</code>.
	 */
	public void setEventModelId(String value) {
		set(8, value);
	}

	/**
	 * Getter for <code>event.event_model_id</code>.
	 */
	public String getEventModelId() {
		return (String) get(8);
	}

	/**
	 * Setter for <code>event.expected_date</code>.
	 */
	public void setExpectedDate(ZonedDateTime value) {
		set(9, value);
	}

	/**
	 * Getter for <code>event.expected_date</code>.
	 */
	public ZonedDateTime getExpectedDate() {
		return (ZonedDateTime) get(9);
	}

	/**
	 * Setter for <code>event.date</code>.
	 */
	public void setDate(ZonedDateTime value) {
		set(10, value);
	}

	/**
	 * Getter for <code>event.date</code>.
	 */
	public ZonedDateTime getDate() {
		return (ZonedDateTime) get(10);
	}

	/**
	 * Setter for <code>event.end_date</code>.
	 */
	public void setEndDate(ZonedDateTime value) {
		set(11, value);
	}

	/**
	 * Getter for <code>event.end_date</code>.
	 */
	public ZonedDateTime getEndDate() {
		return (ZonedDateTime) get(11);
	}

	/**
	 * Setter for <code>event.not_done</code>.
	 */
	public void setNotDone(Boolean value) {
		set(12, value);
	}

	/**
	 * Getter for <code>event.not_done</code>.
	 */
	public Boolean getNotDone() {
		return (Boolean) get(12);
	}

	/**
	 * Setter for <code>event.blocking</code>.
	 */
	public void setBlocking(Boolean value) {
		set(13, value);
	}

	/**
	 * Getter for <code>event.blocking</code>.
	 */
	public Boolean getBlocking() {
		return (Boolean) get(13);
	}

	/**
	 * Setter for <code>event.locked</code>.
	 */
	public void setLocked(Boolean value) {
		set(14, value);
	}

	/**
	 * Getter for <code>event.locked</code>.
	 */
	public Boolean getLocked() {
		return (Boolean) get(14);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached EventRecord
	 */
	public EventRecord() {
		super(Event.EVENT);
	}

	/**
	 * Create a detached, initialised EventRecord
	 */
	public EventRecord(Long pk, String id, ZonedDateTime creationTime, ZonedDateTime lastUpdateTime, Boolean deleted, Long scopeFk, String scopeModelId, Integer eventGroupNumber, String eventModelId, ZonedDateTime expectedDate, ZonedDateTime date, ZonedDateTime endDate, Boolean notDone, Boolean blocking, Boolean locked) {
		super(Event.EVENT);

		setPk(pk);
		setId(id);
		setCreationTime(creationTime);
		setLastUpdateTime(lastUpdateTime);
		setDeleted(deleted);
		setScopeFk(scopeFk);
		setScopeModelId(scopeModelId);
		setEventGroupNumber(eventGroupNumber);
		setEventModelId(eventModelId);
		setExpectedDate(expectedDate);
		setDate(date);
		setEndDate(endDate);
		setNotDone(notDone);
		setBlocking(blocking);
		setLocked(locked);
		resetChangedOnNotNull();
	}
}
