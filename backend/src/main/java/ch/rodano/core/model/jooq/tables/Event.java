/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Dataset.DatasetPath;
import ch.rodano.core.model.jooq.tables.EventAudit.EventAuditPath;
import ch.rodano.core.model.jooq.tables.File.FilePath;
import ch.rodano.core.model.jooq.tables.Form.FormPath;
import ch.rodano.core.model.jooq.tables.Scope.ScopePath;
import ch.rodano.core.model.jooq.tables.WorkflowStatus.WorkflowStatusPath;
import ch.rodano.core.model.jooq.tables.records.EventRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Event extends TableImpl<EventRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>event</code>
	 */
	public static final Event EVENT = new Event();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<EventRecord> getRecordType() {
		return EventRecord.class;
	}

	/**
	 * The column <code>event.pk</code>.
	 */
	public final TableField<EventRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>event.id</code>.
	 */
	public final TableField<EventRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(200).nullable(false), this, "");

	/**
	 * The column <code>event.creation_time</code>.
	 */
	public final TableField<EventRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>event.last_update_time</code>.
	 */
	public final TableField<EventRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>event.deleted</code>.
	 */
	public final TableField<EventRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>event.scope_fk</code>.
	 */
	public final TableField<EventRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>event.scope_model_id</code>.
	 */
	public final TableField<EventRecord, String> SCOPE_MODEL_ID = createField(DSL.name("scope_model_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>event.event_group_number</code>.
	 */
	public final TableField<EventRecord, Integer> EVENT_GROUP_NUMBER = createField(DSL.name("event_group_number"), SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>event.event_model_id</code>.
	 */
	public final TableField<EventRecord, String> EVENT_MODEL_ID = createField(DSL.name("event_model_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>event.expected_date</code>.
	 */
	public final TableField<EventRecord, ZonedDateTime> EXPECTED_DATE = createField(DSL.name("expected_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>event.date</code>.
	 */
	public final TableField<EventRecord, ZonedDateTime> DATE = createField(DSL.name("date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>event.end_date</code>.
	 */
	public final TableField<EventRecord, ZonedDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>event.not_done</code>.
	 */
	public final TableField<EventRecord, Boolean> NOT_DONE = createField(DSL.name("not_done"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("1"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>event.blocking</code>.
	 */
	public final TableField<EventRecord, Boolean> BLOCKING = createField(DSL.name("blocking"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>event.locked</code>.
	 */
	public final TableField<EventRecord, Boolean> LOCKED = createField(DSL.name("locked"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	private Event(Name alias, Table<EventRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Event(Name alias, Table<EventRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>event</code> table reference
	 */
	public Event(String alias) {
		this(DSL.name(alias), EVENT);
	}

	/**
	 * Create an aliased <code>event</code> table reference
	 */
	public Event(Name alias) {
		this(alias, EVENT);
	}

	/**
	 * Create a <code>event</code> table reference
	 */
	public Event() {
		this(DSL.name("event"), null);
	}

	public <O extends Record> Event(Table<O> path, ForeignKey<O, EventRecord> childPath, InverseForeignKey<O, EventRecord> parentPath) {
		super(path, childPath, parentPath, EVENT);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class EventPath extends Event implements Path<EventRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> EventPath(Table<O> path, ForeignKey<O, EventRecord> childPath, InverseForeignKey<O, EventRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private EventPath(Name alias, Table<EventRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public EventPath as(String alias) {
			return new EventPath(DSL.name(alias), this);
		}

		@Override
		public EventPath as(Name alias) {
			return new EventPath(alias, this);
		}

		@Override
		public EventPath as(Table<?> alias) {
			return new EventPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.EVENT_IDX_EVENT_BLOCKING, Indexes.EVENT_IDX_EVENT_DATE, Indexes.EVENT_IDX_EVENT_DELETED, Indexes.EVENT_IDX_EVENT_EVENT_MODEL_ID);
	}

	@Override
	public Identity<EventRecord, Long> getIdentity() {
		return (Identity<EventRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<EventRecord> getPrimaryKey() {
		return Keys.KEY_EVENT_PRIMARY;
	}

	@Override
	public List<UniqueKey<EventRecord>> getUniqueKeys() {
		return Arrays.asList(Keys.KEY_EVENT_U_EVENT_ID);
	}

	@Override
	public List<ForeignKey<EventRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_EVENT_SCOPE_FK);
	}

	private transient ScopePath _scope;

	/**
	 * Get the implicit join path to the <code>scope</code> table.
	 */
	public ScopePath scope() {
		if (_scope == null)
			_scope = new ScopePath(this, Keys.FK_EVENT_SCOPE_FK, null);

		return _scope;
	}

	private transient DatasetPath _dataset;

	/**
	 * Get the implicit to-many join path to the <code>dataset</code> table
	 */
	public DatasetPath dataset() {
		if (_dataset == null)
			_dataset = new DatasetPath(this, null, Keys.FK_DATASET_EVENT_FK.getInverseKey());

		return _dataset;
	}

	private transient EventAuditPath _eventAudit;

	/**
	 * Get the implicit to-many join path to the <code>event_audit</code> table
	 */
	public EventAuditPath eventAudit() {
		if (_eventAudit == null)
			_eventAudit = new EventAuditPath(this, null, Keys.FK_EVENT_AUDIT_OBJECT_FK.getInverseKey());

		return _eventAudit;
	}

	private transient FilePath _file;

	/**
	 * Get the implicit to-many join path to the <code>file</code> table
	 */
	public FilePath file() {
		if (_file == null)
			_file = new FilePath(this, null, Keys.FK_FILE_EVENT_FK.getInverseKey());

		return _file;
	}

	private transient FormPath _form;

	/**
	 * Get the implicit to-many join path to the <code>form</code> table
	 */
	public FormPath form() {
		if (_form == null)
			_form = new FormPath(this, null, Keys.FK_FORM_EVENT_FK.getInverseKey());

		return _form;
	}

	private transient WorkflowStatusPath _workflowStatus;

	/**
	 * Get the implicit to-many join path to the <code>workflow_status</code> table
	 */
	public WorkflowStatusPath workflowStatus() {
		if (_workflowStatus == null)
			_workflowStatus = new WorkflowStatusPath(this, null, Keys.FK_WORKFLOW_STATUS_EVENT_FK.getInverseKey());

		return _workflowStatus;
	}

	@Override
	public Event as(String alias) {
		return new Event(DSL.name(alias), this);
	}

	@Override
	public Event as(Name alias) {
		return new Event(alias, this);
	}

	@Override
	public Event as(Table<?> alias) {
		return new Event(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Event rename(String name) {
		return new Event(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Event rename(Name name) {
		return new Event(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Event rename(Table<?> name) {
		return new Event(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Event where(Condition condition) {
		return new Event(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Event where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Event where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Event where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Event where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Event where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Event where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Event where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Event whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Event whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
