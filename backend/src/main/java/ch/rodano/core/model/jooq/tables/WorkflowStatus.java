/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Event.EventPath;
import ch.rodano.core.model.jooq.tables.Field.FieldPath;
import ch.rodano.core.model.jooq.tables.Form.FormPath;
import ch.rodano.core.model.jooq.tables.Payment.PaymentPath;
import ch.rodano.core.model.jooq.tables.Robot.RobotPath;
import ch.rodano.core.model.jooq.tables.Scope.ScopePath;
import ch.rodano.core.model.jooq.tables.User.UserPath;
import ch.rodano.core.model.jooq.tables.WorkflowStatusAudit.WorkflowStatusAuditPath;
import ch.rodano.core.model.jooq.tables.records.WorkflowStatusRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class WorkflowStatus extends TableImpl<WorkflowStatusRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>workflow_status</code>
	 */
	public static final WorkflowStatus WORKFLOW_STATUS = new WorkflowStatus();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<WorkflowStatusRecord> getRecordType() {
		return WorkflowStatusRecord.class;
	}

	/**
	 * The column <code>workflow_status.pk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>workflow_status.creation_time</code>.
	 */
	public final TableField<WorkflowStatusRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>workflow_status.last_update_time</code>.
	 */
	public final TableField<WorkflowStatusRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>workflow_status.deleted</code>.
	 */
	public final TableField<WorkflowStatusRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>workflow_status.scope_fk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>workflow_status.event_fk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> EVENT_FK = createField(DSL.name("event_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>workflow_status.form_fk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> FORM_FK = createField(DSL.name("form_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>workflow_status.field_fk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> FIELD_FK = createField(DSL.name("field_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>workflow_status.user_fk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> USER_FK = createField(DSL.name("user_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>workflow_status.robot_fk</code>.
	 */
	public final TableField<WorkflowStatusRecord, Long> ROBOT_FK = createField(DSL.name("robot_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>workflow_status.profile_id</code>.
	 */
	public final TableField<WorkflowStatusRecord, String> PROFILE_ID = createField(DSL.name("profile_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>workflow_status.state_id</code>.
	 */
	public final TableField<WorkflowStatusRecord, String> STATE_ID = createField(DSL.name("state_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>workflow_status.workflow_id</code>.
	 */
	public final TableField<WorkflowStatusRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>workflow_status.action_id</code>.
	 */
	public final TableField<WorkflowStatusRecord, String> ACTION_ID = createField(DSL.name("action_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>workflow_status.validator_id</code>.
	 */
	public final TableField<WorkflowStatusRecord, String> VALIDATOR_ID = createField(DSL.name("validator_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>workflow_status.trigger_message</code>.
	 */
	public final TableField<WorkflowStatusRecord, String> TRIGGER_MESSAGE = createField(DSL.name("trigger_message"), SQLDataType.VARCHAR(1000).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	private WorkflowStatus(Name alias, Table<WorkflowStatusRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private WorkflowStatus(Name alias, Table<WorkflowStatusRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>workflow_status</code> table reference
	 */
	public WorkflowStatus(String alias) {
		this(DSL.name(alias), WORKFLOW_STATUS);
	}

	/**
	 * Create an aliased <code>workflow_status</code> table reference
	 */
	public WorkflowStatus(Name alias) {
		this(alias, WORKFLOW_STATUS);
	}

	/**
	 * Create a <code>workflow_status</code> table reference
	 */
	public WorkflowStatus() {
		this(DSL.name("workflow_status"), null);
	}

	public <O extends Record> WorkflowStatus(Table<O> path, ForeignKey<O, WorkflowStatusRecord> childPath, InverseForeignKey<O, WorkflowStatusRecord> parentPath) {
		super(path, childPath, parentPath, WORKFLOW_STATUS);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class WorkflowStatusPath extends WorkflowStatus implements Path<WorkflowStatusRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> WorkflowStatusPath(Table<O> path, ForeignKey<O, WorkflowStatusRecord> childPath, InverseForeignKey<O, WorkflowStatusRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private WorkflowStatusPath(Name alias, Table<WorkflowStatusRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public WorkflowStatusPath as(String alias) {
			return new WorkflowStatusPath(DSL.name(alias), this);
		}

		@Override
		public WorkflowStatusPath as(Name alias) {
			return new WorkflowStatusPath(alias, this);
		}

		@Override
		public WorkflowStatusPath as(Table<?> alias) {
			return new WorkflowStatusPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.WORKFLOW_STATUS_AGGREGATE_EVENT, Indexes.WORKFLOW_STATUS_AGGREGATE_SCOPE, Indexes.WORKFLOW_STATUS_IDX_WORKFLOW_STATUS_DELETED, Indexes.WORKFLOW_STATUS_IDX_WORKFLOW_STATUS_STATE_ID, Indexes.WORKFLOW_STATUS_IDX_WORKFLOW_STATUS_WORKFLOW_ID);
	}

	@Override
	public Identity<WorkflowStatusRecord, Long> getIdentity() {
		return (Identity<WorkflowStatusRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<WorkflowStatusRecord> getPrimaryKey() {
		return Keys.KEY_WORKFLOW_STATUS_PRIMARY;
	}

	@Override
	public List<ForeignKey<WorkflowStatusRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_WORKFLOW_STATUS_EVENT_FK, Keys.FK_WORKFLOW_STATUS_FIELD_FK, Keys.FK_WORKFLOW_STATUS_FORM_FK, Keys.FK_WORKFLOW_STATUS_ROBOT_FK, Keys.FK_WORKFLOW_STATUS_SCOPE_FK, Keys.FK_WORKFLOW_STATUS_USER_FK);
	}

	private transient EventPath _event;

	/**
	 * Get the implicit join path to the <code>event</code> table.
	 */
	public EventPath event() {
		if (_event == null)
			_event = new EventPath(this, Keys.FK_WORKFLOW_STATUS_EVENT_FK, null);

		return _event;
	}

	private transient FieldPath _field;

	/**
	 * Get the implicit join path to the <code>field</code> table.
	 */
	public FieldPath field() {
		if (_field == null)
			_field = new FieldPath(this, Keys.FK_WORKFLOW_STATUS_FIELD_FK, null);

		return _field;
	}

	private transient FormPath _form;

	/**
	 * Get the implicit join path to the <code>form</code> table.
	 */
	public FormPath form() {
		if (_form == null)
			_form = new FormPath(this, Keys.FK_WORKFLOW_STATUS_FORM_FK, null);

		return _form;
	}

	private transient RobotPath _robot;

	/**
	 * Get the implicit join path to the <code>robot</code> table.
	 */
	public RobotPath robot() {
		if (_robot == null)
			_robot = new RobotPath(this, Keys.FK_WORKFLOW_STATUS_ROBOT_FK, null);

		return _robot;
	}

	private transient ScopePath _scope;

	/**
	 * Get the implicit join path to the <code>scope</code> table.
	 */
	public ScopePath scope() {
		if (_scope == null)
			_scope = new ScopePath(this, Keys.FK_WORKFLOW_STATUS_SCOPE_FK, null);

		return _scope;
	}

	private transient UserPath _user;

	/**
	 * Get the implicit join path to the <code>user</code> table.
	 */
	public UserPath user() {
		if (_user == null)
			_user = new UserPath(this, Keys.FK_WORKFLOW_STATUS_USER_FK, null);

		return _user;
	}

	private transient PaymentPath _payment;

	/**
	 * Get the implicit to-many join path to the <code>payment</code> table
	 */
	public PaymentPath payment() {
		if (_payment == null)
			_payment = new PaymentPath(this, null, Keys.FK_PAYMENT_WORKFLOW_STATUS_FK.getInverseKey());

		return _payment;
	}

	private transient WorkflowStatusAuditPath _workflowStatusAudit;

	/**
	 * Get the implicit to-many join path to the <code>workflow_status_audit</code>
	 * table
	 */
	public WorkflowStatusAuditPath workflowStatusAudit() {
		if (_workflowStatusAudit == null)
			_workflowStatusAudit = new WorkflowStatusAuditPath(this, null, Keys.FK_WORKFLOW_STATUS_AUDIT_OBJECT_FK.getInverseKey());

		return _workflowStatusAudit;
	}

	@Override
	public WorkflowStatus as(String alias) {
		return new WorkflowStatus(DSL.name(alias), this);
	}

	@Override
	public WorkflowStatus as(Name alias) {
		return new WorkflowStatus(alias, this);
	}

	@Override
	public WorkflowStatus as(Table<?> alias) {
		return new WorkflowStatus(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public WorkflowStatus rename(String name) {
		return new WorkflowStatus(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public WorkflowStatus rename(Name name) {
		return new WorkflowStatus(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public WorkflowStatus rename(Table<?> name) {
		return new WorkflowStatus(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public WorkflowStatus where(Condition condition) {
		return new WorkflowStatus(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public WorkflowStatus where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public WorkflowStatus where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public WorkflowStatus where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public WorkflowStatus where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public WorkflowStatus where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public WorkflowStatus where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public WorkflowStatus where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public WorkflowStatus whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public WorkflowStatus whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
