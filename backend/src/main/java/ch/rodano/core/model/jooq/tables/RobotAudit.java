/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.AuditAction.AuditActionPath;
import ch.rodano.core.model.jooq.tables.Robot.RobotPath;
import ch.rodano.core.model.jooq.tables.User.UserPath;
import ch.rodano.core.model.jooq.tables.records.RobotAuditRecord;
import ch.rodano.core.model.jooqutils.AuditTable;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class RobotAudit extends TableImpl<RobotAuditRecord> implements AuditTable {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>robot_audit</code>
	 */
	public static final RobotAudit ROBOT_AUDIT = new RobotAudit();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<RobotAuditRecord> getRecordType() {
		return RobotAuditRecord.class;
	}

	/**
	 * The column <code>robot_audit.pk</code>.
	 */
	public final TableField<RobotAuditRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>robot_audit.audit_action_fk</code>.
	 */
	public final TableField<RobotAuditRecord, Long> AUDIT_ACTION_FK = createField(DSL.name("audit_action_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>robot_audit.audit_datetime</code>.
	 */
	public final TableField<RobotAuditRecord, ZonedDateTime> AUDIT_DATETIME = createField(DSL.name("audit_datetime"), SQLDataType.LOCALDATETIME(3).nullable(false), this, "", new DateConverter());

	/**
	 * The column <code>robot_audit.audit_actor</code>.
	 */
	public final TableField<RobotAuditRecord, String> AUDIT_ACTOR = createField(DSL.name("audit_actor"), SQLDataType.VARCHAR(200).nullable(false), this, "");

	/**
	 * The column <code>robot_audit.audit_user_fk</code>.
	 */
	public final TableField<RobotAuditRecord, Long> AUDIT_USER_FK = createField(DSL.name("audit_user_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>robot_audit.audit_robot_fk</code>.
	 */
	public final TableField<RobotAuditRecord, Long> AUDIT_ROBOT_FK = createField(DSL.name("audit_robot_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>robot_audit.audit_context</code>.
	 */
	public final TableField<RobotAuditRecord, String> AUDIT_CONTEXT = createField(DSL.name("audit_context"), SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>robot_audit.audit_object_fk</code>.
	 */
	public final TableField<RobotAuditRecord, Long> AUDIT_OBJECT_FK = createField(DSL.name("audit_object_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>robot_audit.deleted</code>.
	 */
	public final TableField<RobotAuditRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>robot_audit.name</code>.
	 */
	public final TableField<RobotAuditRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>robot_audit.key</code>.
	 */
	public final TableField<RobotAuditRecord, String> KEY = createField(DSL.name("key"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>robot_audit.activated</code>.
	 */
	public final TableField<RobotAuditRecord, Boolean> ACTIVATED = createField(DSL.name("activated"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	private RobotAudit(Name alias, Table<RobotAuditRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private RobotAudit(Name alias, Table<RobotAuditRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>robot_audit</code> table reference
	 */
	public RobotAudit(String alias) {
		this(DSL.name(alias), ROBOT_AUDIT);
	}

	/**
	 * Create an aliased <code>robot_audit</code> table reference
	 */
	public RobotAudit(Name alias) {
		this(alias, ROBOT_AUDIT);
	}

	/**
	 * Create a <code>robot_audit</code> table reference
	 */
	public RobotAudit() {
		this(DSL.name("robot_audit"), null);
	}

	public <O extends Record> RobotAudit(Table<O> path, ForeignKey<O, RobotAuditRecord> childPath, InverseForeignKey<O, RobotAuditRecord> parentPath) {
		super(path, childPath, parentPath, ROBOT_AUDIT);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class RobotAuditPath extends RobotAudit implements Path<RobotAuditRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> RobotAuditPath(Table<O> path, ForeignKey<O, RobotAuditRecord> childPath, InverseForeignKey<O, RobotAuditRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private RobotAuditPath(Name alias, Table<RobotAuditRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public RobotAuditPath as(String alias) {
			return new RobotAuditPath(DSL.name(alias), this);
		}

		@Override
		public RobotAuditPath as(Name alias) {
			return new RobotAuditPath(alias, this);
		}

		@Override
		public RobotAuditPath as(Table<?> alias) {
			return new RobotAuditPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<RobotAuditRecord, Long> getIdentity() {
		return (Identity<RobotAuditRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<RobotAuditRecord> getPrimaryKey() {
		return Keys.KEY_ROBOT_AUDIT_PRIMARY;
	}

	@Override
	public List<ForeignKey<RobotAuditRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_ROBOT_AUDIT_AUDIT_OBJECT_FK, Keys.FK_ROBOT_AUDIT_ROBOT_FK, Keys.FK_ROBOT_AUDIT_USER_FK, Keys.FK_ROBOT_TRAIL_AUDIT_ACTION_FK);
	}

	private transient RobotPath _fkRobotAuditAuditObjectFk;

	/**
	 * Get the implicit join path to the <code>robot</code> table, via the
	 * <code>fk_robot_audit_audit_object_fk</code> key.
	 */
	public RobotPath fkRobotAuditAuditObjectFk() {
		if (_fkRobotAuditAuditObjectFk == null)
			_fkRobotAuditAuditObjectFk = new RobotPath(this, Keys.FK_ROBOT_AUDIT_AUDIT_OBJECT_FK, null);

		return _fkRobotAuditAuditObjectFk;
	}

	private transient RobotPath _fkRobotAuditRobotFk;

	/**
	 * Get the implicit join path to the <code>robot</code> table, via the
	 * <code>fk_robot_audit_robot_fk</code> key.
	 */
	public RobotPath fkRobotAuditRobotFk() {
		if (_fkRobotAuditRobotFk == null)
			_fkRobotAuditRobotFk = new RobotPath(this, Keys.FK_ROBOT_AUDIT_ROBOT_FK, null);

		return _fkRobotAuditRobotFk;
	}

	private transient UserPath _user;

	/**
	 * Get the implicit join path to the <code>user</code> table.
	 */
	public UserPath user() {
		if (_user == null)
			_user = new UserPath(this, Keys.FK_ROBOT_AUDIT_USER_FK, null);

		return _user;
	}

	private transient AuditActionPath _auditAction;

	/**
	 * Get the implicit join path to the <code>audit_action</code> table.
	 */
	public AuditActionPath auditAction() {
		if (_auditAction == null)
			_auditAction = new AuditActionPath(this, Keys.FK_ROBOT_TRAIL_AUDIT_ACTION_FK, null);

		return _auditAction;
	}

	@Override
	public RobotAudit as(String alias) {
		return new RobotAudit(DSL.name(alias), this);
	}

	@Override
	public RobotAudit as(Name alias) {
		return new RobotAudit(alias, this);
	}

	@Override
	public RobotAudit as(Table<?> alias) {
		return new RobotAudit(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RobotAudit rename(String name) {
		return new RobotAudit(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RobotAudit rename(Name name) {
		return new RobotAudit(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public RobotAudit rename(Table<?> name) {
		return new RobotAudit(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RobotAudit where(Condition condition) {
		return new RobotAudit(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RobotAudit where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RobotAudit where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RobotAudit where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RobotAudit where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RobotAudit where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RobotAudit where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public RobotAudit where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RobotAudit whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public RobotAudit whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
