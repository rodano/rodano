/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.records.ChartRecord;
import ch.rodano.core.services.dao.chart.ChartType;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Chart extends TableImpl<ChartRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>chart</code>
	 */
	public static final Chart CHART = new Chart();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ChartRecord> getRecordType() {
		return ChartRecord.class;
	}

	/**
	 * The column <code>chart.pk</code>.
	 */
	public final TableField<ChartRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>chart.chart_id</code>.
	 */
	public final TableField<ChartRecord, String> CHART_ID = createField(DSL.name("chart_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>chart.title</code>.
	 */
	public final TableField<ChartRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.x_label</code>.
	 */
	public final TableField<ChartRecord, String> X_LABEL = createField(DSL.name("x_label"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.y_label</code>.
	 */
	public final TableField<ChartRecord, String> Y_LABEL = createField(DSL.name("y_label"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.chart_type</code>.
	 */
	public final TableField<ChartRecord, ChartType> CHART_TYPE = createField(DSL.name("chart_type"), SQLDataType.VARCHAR(100).nullable(false), this, "", new EnumConverter<String, ChartType>(String.class, ChartType.class));

	/**
	 * The column <code>chart.graph_type</code>.
	 */
	public final TableField<ChartRecord, String> GRAPH_TYPE = createField(DSL.name("graph_type"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	/**
	 * The column <code>chart.unit_format</code>.
	 */
	public final TableField<ChartRecord, String> UNIT_FORMAT = createField(DSL.name("unit_format"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.ignore_na</code>.
	 */
	public final TableField<ChartRecord, Boolean> IGNORE_NA = createField(DSL.name("ignore_na"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.show_x_axis_label</code>.
	 */
	public final TableField<ChartRecord, Boolean> SHOW_X_AXIS_LABEL = createField(DSL.name("show_x_axis_label"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.show_y_axis_label</code>.
	 */
	public final TableField<ChartRecord, Boolean> SHOW_Y_AXIS_LABEL = createField(DSL.name("show_y_axis_label"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.show_data_labels</code>.
	 */
	public final TableField<ChartRecord, Boolean> SHOW_DATA_LABELS = createField(DSL.name("show_data_labels"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.data_label_pos</code>.
	 */
	public final TableField<ChartRecord, String> DATA_LABEL_POS = createField(DSL.name("data_label_pos"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.data_label_format</code>.
	 */
	public final TableField<ChartRecord, String> DATA_LABEL_FORMAT = createField(DSL.name("data_label_format"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.show_legend</code>.
	 */
	public final TableField<ChartRecord, Boolean> SHOW_LEGEND = createField(DSL.name("show_legend"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.show_gridlines</code>.
	 */
	public final TableField<ChartRecord, Boolean> SHOW_GRIDLINES = createField(DSL.name("show_gridlines"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.background_color</code>.
	 */
	public final TableField<ChartRecord, String> BACKGROUND_COLOR = createField(DSL.name("background_color"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.header_color</code>.
	 */
	public final TableField<ChartRecord, String> HEADER_COLOR = createField(DSL.name("header_color"), SQLDataType.VARCHAR(20).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.workflow_id</code>.
	 */
	public final TableField<ChartRecord, String> WORKFLOW_ID = createField(DSL.name("workflow_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.leaf_scope_model_id</code>.
	 */
	public final TableField<ChartRecord, String> LEAF_SCOPE_MODEL_ID = createField(DSL.name("leaf_scope_model_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.dataset_model_id</code>.
	 */
	public final TableField<ChartRecord, String> DATASET_MODEL_ID = createField(DSL.name("dataset_model_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.field_model_id</code>.
	 */
	public final TableField<ChartRecord, String> FIELD_MODEL_ID = createField(DSL.name("field_model_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.event_model_id</code>.
	 */
	public final TableField<ChartRecord, String> EVENT_MODEL_ID = createField(DSL.name("event_model_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.scope_model_id</code>.
	 */
	public final TableField<ChartRecord, String> SCOPE_MODEL_ID = createField(DSL.name("scope_model_id"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart.show_other_category</code>.
	 */
	public final TableField<ChartRecord, Boolean> SHOW_OTHER_CATEGORY = createField(DSL.name("show_other_category"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>chart.ignore_user_rights</code>.
	 */
	public final TableField<ChartRecord, Boolean> IGNORE_USER_RIGHTS = createField(DSL.name("ignore_user_rights"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	private Chart(Name alias, Table<ChartRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Chart(Name alias, Table<ChartRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>chart</code> table reference
	 */
	public Chart(String alias) {
		this(DSL.name(alias), CHART);
	}

	/**
	 * Create an aliased <code>chart</code> table reference
	 */
	public Chart(Name alias) {
		this(alias, CHART);
	}

	/**
	 * Create a <code>chart</code> table reference
	 */
	public Chart() {
		this(DSL.name("chart"), null);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<ChartRecord, Long> getIdentity() {
		return (Identity<ChartRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ChartRecord> getPrimaryKey() {
		return Keys.KEY_CHART_PRIMARY;
	}

	@Override
	public Chart as(String alias) {
		return new Chart(DSL.name(alias), this);
	}

	@Override
	public Chart as(Name alias) {
		return new Chart(alias, this);
	}

	@Override
	public Chart as(Table<?> alias) {
		return new Chart(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Chart rename(String name) {
		return new Chart(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Chart rename(Name name) {
		return new Chart(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Chart rename(Table<?> name) {
		return new Chart(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Chart where(Condition condition) {
		return new Chart(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Chart where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Chart where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Chart where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Chart where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Chart where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Chart where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Chart where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Chart whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Chart whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
