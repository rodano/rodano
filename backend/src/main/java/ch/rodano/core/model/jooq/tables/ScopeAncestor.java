/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.tables.records.ScopeAncestorRecord;

import java.time.ZonedDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ScopeAncestor extends TableImpl<ScopeAncestorRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>scope_ancestor</code>
	 */
	public static final ScopeAncestor SCOPE_ANCESTOR = new ScopeAncestor();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ScopeAncestorRecord> getRecordType() {
		return ScopeAncestorRecord.class;
	}

	/**
	 * The column <code>scope_ancestor.scope_fk</code>.
	 */
	public final TableField<ScopeAncestorRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>scope_ancestor.ancestor_fk</code>.
	 */
	public final TableField<ScopeAncestorRecord, Long> ANCESTOR_FK = createField(DSL.name("ancestor_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>scope_ancestor.start_date</code>.
	 */
	public final TableField<ScopeAncestorRecord, ZonedDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope_ancestor.end_date</code>.
	 */
	public final TableField<ScopeAncestorRecord, ZonedDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope_ancestor.direct</code>.
	 */
	public final TableField<ScopeAncestorRecord, Boolean> DIRECT = createField(DSL.name("direct"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>scope_ancestor.virtual</code>.
	 */
	public final TableField<ScopeAncestorRecord, Boolean> VIRTUAL = createField(DSL.name("virtual"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>scope_ancestor.default</code>.
	 */
	public final TableField<ScopeAncestorRecord, Boolean> DEFAULT = createField(DSL.name("default"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>scope_ancestor.ancestor_deleted</code>.
	 */
	public final TableField<ScopeAncestorRecord, Boolean> ANCESTOR_DELETED = createField(DSL.name("ancestor_deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	private ScopeAncestor(Name alias, Table<ScopeAncestorRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private ScopeAncestor(Name alias, Table<ScopeAncestorRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view `scope_ancestor` as with recursive recursive_scope_ancestor(`scope_fk`,`ancestor_fk`,`start_date`,`end_date`,`direct`,`virtual`,`default_relation`,`ancestor_deleted`) as (select `sr`.`scope_fk` AS `scope_fk`,`sr`.`parent_fk` AS `ancestor_fk`,`sr`.`start_date` AS `start_date`,`sr`.`end_date` AS `end_date`,1 AS `direct`,`s`.`virtual` AS `virtual`,`sr`.`default` AS `default_relation`,`s`.`deleted` AS `ancestor_deleted` from (`rodano`.`scope_relation` `sr` join `rodano`.`scope` `s` on(`sr`.`parent_fk` = `s`.`pk`)) union all select `rsa`.`scope_fk` AS `scope_fk`,`sr`.`parent_fk` AS `parent_fk`,case when `sr`.`start_date` is null then `rsa`.`start_date` when `rsa`.`start_date` is null then `sr`.`start_date` else greatest(`sr`.`start_date`,`rsa`.`start_date`) end AS `start_date`,case when `sr`.`end_date` is null then `rsa`.`end_date` when `rsa`.`end_date` is null then `sr`.`end_date` else least(`sr`.`end_date`,`rsa`.`end_date`) end AS `end_date`,0 AS `direct`,`s`.`virtual` <> 0 or `rsa`.`virtual` <> 0 AS `s.virtual or rsa.virtual`,`sr`.`default` <> 0 and `rsa`.`default_relation` <> 0 AS `sr.``default`` && rsa.``default_relation```,`s`.`deleted` <> 0 or `rsa`.`ancestor_deleted` <> 0 AS `ancestor_deleted` from ((`recursive_scope_ancestor` `rsa` join `rodano`.`scope_relation` `sr` on(`sr`.`scope_fk` = `rsa`.`ancestor_fk`)) join `rodano`.`scope` `s` on(`sr`.`parent_fk` = `s`.`pk`)))select `recursive_scope_ancestor`.`scope_fk` AS `scope_fk`,`recursive_scope_ancestor`.`ancestor_fk` AS `ancestor_fk`,min(`recursive_scope_ancestor`.`start_date`) AS `start_date`,case when max(case when `recursive_scope_ancestor`.`end_date` is null then 1 else 0 end) = 0 then max(`recursive_scope_ancestor`.`end_date`) end AS `end_date`,bit_or(`recursive_scope_ancestor`.`direct`) AS `direct`,bit_and(`recursive_scope_ancestor`.`virtual`) AS `virtual`,bit_or(`recursive_scope_ancestor`.`default_relation`) AS `default`,bit_and(`recursive_scope_ancestor`.`ancestor_deleted`) AS `ancestor_deleted` from `recursive_scope_ancestor` group by `recursive_scope_ancestor`.`scope_fk`,`recursive_scope_ancestor`.`ancestor_fk` order by `recursive_scope_ancestor`.`scope_fk`"), where);
	}

	/**
	 * Create an aliased <code>scope_ancestor</code> table reference
	 */
	public ScopeAncestor(String alias) {
		this(DSL.name(alias), SCOPE_ANCESTOR);
	}

	/**
	 * Create an aliased <code>scope_ancestor</code> table reference
	 */
	public ScopeAncestor(Name alias) {
		this(alias, SCOPE_ANCESTOR);
	}

	/**
	 * Create a <code>scope_ancestor</code> table reference
	 */
	public ScopeAncestor() {
		this(DSL.name("scope_ancestor"), null);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public ScopeAncestor as(String alias) {
		return new ScopeAncestor(DSL.name(alias), this);
	}

	@Override
	public ScopeAncestor as(Name alias) {
		return new ScopeAncestor(alias, this);
	}

	@Override
	public ScopeAncestor as(Table<?> alias) {
		return new ScopeAncestor(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ScopeAncestor rename(String name) {
		return new ScopeAncestor(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ScopeAncestor rename(Name name) {
		return new ScopeAncestor(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ScopeAncestor rename(Table<?> name) {
		return new ScopeAncestor(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeAncestor where(Condition condition) {
		return new ScopeAncestor(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeAncestor where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeAncestor where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeAncestor where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeAncestor where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeAncestor where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeAncestor where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeAncestor where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeAncestor whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeAncestor whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
