/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables.records;


import ch.rodano.core.model.jooq.tables.Chart;
import ch.rodano.core.services.dao.chart.ChartType;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChartRecord extends UpdatableRecordImpl<ChartRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * Setter for <code>chart.pk</code>.
	 */
	public void setPk(Long value) {
		set(0, value);
	}

	/**
	 * Getter for <code>chart.pk</code>.
	 */
	public Long getPk() {
		return (Long) get(0);
	}

	/**
	 * Setter for <code>chart.chart_id</code>.
	 */
	public void setChartId(String value) {
		set(1, value);
	}

	/**
	 * Getter for <code>chart.chart_id</code>.
	 */
	public String getChartId() {
		return (String) get(1);
	}

	/**
	 * Setter for <code>chart.title</code>.
	 */
	public void setTitle(String value) {
		set(2, value);
	}

	/**
	 * Getter for <code>chart.title</code>.
	 */
	public String getTitle() {
		return (String) get(2);
	}

	/**
	 * Setter for <code>chart.x_label</code>.
	 */
	public void setXLabel(String value) {
		set(3, value);
	}

	/**
	 * Getter for <code>chart.x_label</code>.
	 */
	public String getXLabel() {
		return (String) get(3);
	}

	/**
	 * Setter for <code>chart.y_label</code>.
	 */
	public void setYLabel(String value) {
		set(4, value);
	}

	/**
	 * Getter for <code>chart.y_label</code>.
	 */
	public String getYLabel() {
		return (String) get(4);
	}

	/**
	 * Setter for <code>chart.chart_type</code>.
	 */
	public void setChartType(ChartType value) {
		set(5, value);
	}

	/**
	 * Getter for <code>chart.chart_type</code>.
	 */
	public ChartType getChartType() {
		return (ChartType) get(5);
	}

	/**
	 * Setter for <code>chart.graph_type</code>.
	 */
	public void setGraphType(String value) {
		set(6, value);
	}

	/**
	 * Getter for <code>chart.graph_type</code>.
	 */
	public String getGraphType() {
		return (String) get(6);
	}

	/**
	 * Setter for <code>chart.unit_format</code>.
	 */
	public void setUnitFormat(String value) {
		set(7, value);
	}

	/**
	 * Getter for <code>chart.unit_format</code>.
	 */
	public String getUnitFormat() {
		return (String) get(7);
	}

	/**
	 * Setter for <code>chart.ignore_na</code>.
	 */
	public void setIgnoreNa(Boolean value) {
		set(8, value);
	}

	/**
	 * Getter for <code>chart.ignore_na</code>.
	 */
	public Boolean getIgnoreNa() {
		return (Boolean) get(8);
	}

	/**
	 * Setter for <code>chart.show_x_axis_label</code>.
	 */
	public void setShowXAxisLabel(Boolean value) {
		set(9, value);
	}

	/**
	 * Getter for <code>chart.show_x_axis_label</code>.
	 */
	public Boolean getShowXAxisLabel() {
		return (Boolean) get(9);
	}

	/**
	 * Setter for <code>chart.show_y_axis_label</code>.
	 */
	public void setShowYAxisLabel(Boolean value) {
		set(10, value);
	}

	/**
	 * Getter for <code>chart.show_y_axis_label</code>.
	 */
	public Boolean getShowYAxisLabel() {
		return (Boolean) get(10);
	}

	/**
	 * Setter for <code>chart.show_data_labels</code>.
	 */
	public void setShowDataLabels(Boolean value) {
		set(11, value);
	}

	/**
	 * Getter for <code>chart.show_data_labels</code>.
	 */
	public Boolean getShowDataLabels() {
		return (Boolean) get(11);
	}

	/**
	 * Setter for <code>chart.data_label_pos</code>.
	 */
	public void setDataLabelPos(String value) {
		set(12, value);
	}

	/**
	 * Getter for <code>chart.data_label_pos</code>.
	 */
	public String getDataLabelPos() {
		return (String) get(12);
	}

	/**
	 * Setter for <code>chart.data_label_format</code>.
	 */
	public void setDataLabelFormat(String value) {
		set(13, value);
	}

	/**
	 * Getter for <code>chart.data_label_format</code>.
	 */
	public String getDataLabelFormat() {
		return (String) get(13);
	}

	/**
	 * Setter for <code>chart.show_legend</code>.
	 */
	public void setShowLegend(Boolean value) {
		set(14, value);
	}

	/**
	 * Getter for <code>chart.show_legend</code>.
	 */
	public Boolean getShowLegend() {
		return (Boolean) get(14);
	}

	/**
	 * Setter for <code>chart.show_gridlines</code>.
	 */
	public void setShowGridlines(Boolean value) {
		set(15, value);
	}

	/**
	 * Getter for <code>chart.show_gridlines</code>.
	 */
	public Boolean getShowGridlines() {
		return (Boolean) get(15);
	}

	/**
	 * Setter for <code>chart.background_color</code>.
	 */
	public void setBackgroundColor(String value) {
		set(16, value);
	}

	/**
	 * Getter for <code>chart.background_color</code>.
	 */
	public String getBackgroundColor() {
		return (String) get(16);
	}

	/**
	 * Setter for <code>chart.header_color</code>.
	 */
	public void setHeaderColor(String value) {
		set(17, value);
	}

	/**
	 * Getter for <code>chart.header_color</code>.
	 */
	public String getHeaderColor() {
		return (String) get(17);
	}

	/**
	 * Setter for <code>chart.workflow_id</code>.
	 */
	public void setWorkflowId(String value) {
		set(18, value);
	}

	/**
	 * Getter for <code>chart.workflow_id</code>.
	 */
	public String getWorkflowId() {
		return (String) get(18);
	}

	/**
	 * Setter for <code>chart.leaf_scope_model_id</code>.
	 */
	public void setLeafScopeModelId(String value) {
		set(19, value);
	}

	/**
	 * Getter for <code>chart.leaf_scope_model_id</code>.
	 */
	public String getLeafScopeModelId() {
		return (String) get(19);
	}

	/**
	 * Setter for <code>chart.dataset_model_id</code>.
	 */
	public void setDatasetModelId(String value) {
		set(20, value);
	}

	/**
	 * Getter for <code>chart.dataset_model_id</code>.
	 */
	public String getDatasetModelId() {
		return (String) get(20);
	}

	/**
	 * Setter for <code>chart.field_model_id</code>.
	 */
	public void setFieldModelId(String value) {
		set(21, value);
	}

	/**
	 * Getter for <code>chart.field_model_id</code>.
	 */
	public String getFieldModelId() {
		return (String) get(21);
	}

	/**
	 * Setter for <code>chart.event_model_id</code>.
	 */
	public void setEventModelId(String value) {
		set(22, value);
	}

	/**
	 * Getter for <code>chart.event_model_id</code>.
	 */
	public String getEventModelId() {
		return (String) get(22);
	}

	/**
	 * Setter for <code>chart.scope_model_id</code>.
	 */
	public void setScopeModelId(String value) {
		set(23, value);
	}

	/**
	 * Getter for <code>chart.scope_model_id</code>.
	 */
	public String getScopeModelId() {
		return (String) get(23);
	}

	/**
	 * Setter for <code>chart.show_other_category</code>.
	 */
	public void setShowOtherCategory(Boolean value) {
		set(24, value);
	}

	/**
	 * Getter for <code>chart.show_other_category</code>.
	 */
	public Boolean getShowOtherCategory() {
		return (Boolean) get(24);
	}

	/**
	 * Setter for <code>chart.ignore_user_rights</code>.
	 */
	public void setIgnoreUserRights(Boolean value) {
		set(25, value);
	}

	/**
	 * Getter for <code>chart.ignore_user_rights</code>.
	 */
	public Boolean getIgnoreUserRights() {
		return (Boolean) get(25);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ChartRecord
	 */
	public ChartRecord() {
		super(Chart.CHART);
	}

	/**
	 * Create a detached, initialised ChartRecord
	 */
	public ChartRecord(Long pk, String chartId, String title, String xLabel, String yLabel, ChartType chartType, String graphType, String unitFormat, Boolean ignoreNa, Boolean showXAxisLabel, Boolean showYAxisLabel, Boolean showDataLabels, String dataLabelPos, String dataLabelFormat, Boolean showLegend, Boolean showGridlines, String backgroundColor, String headerColor, String workflowId, String leafScopeModelId, String datasetModelId, String fieldModelId, String eventModelId, String scopeModelId, Boolean showOtherCategory, Boolean ignoreUserRights) {
		super(Chart.CHART);

		setPk(pk);
		setChartId(chartId);
		setTitle(title);
		setXLabel(xLabel);
		setYLabel(yLabel);
		setChartType(chartType);
		setGraphType(graphType);
		setUnitFormat(unitFormat);
		setIgnoreNa(ignoreNa);
		setShowXAxisLabel(showXAxisLabel);
		setShowYAxisLabel(showYAxisLabel);
		setShowDataLabels(showDataLabels);
		setDataLabelPos(dataLabelPos);
		setDataLabelFormat(dataLabelFormat);
		setShowLegend(showLegend);
		setShowGridlines(showGridlines);
		setBackgroundColor(backgroundColor);
		setHeaderColor(headerColor);
		setWorkflowId(workflowId);
		setLeafScopeModelId(leafScopeModelId);
		setDatasetModelId(datasetModelId);
		setFieldModelId(fieldModelId);
		setEventModelId(eventModelId);
		setScopeModelId(scopeModelId);
		setShowOtherCategory(showOtherCategory);
		setIgnoreUserRights(ignoreUserRights);
		resetChangedOnNotNull();
	}
}
