/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq;


import ch.rodano.core.model.jooq.tables.AuditAction;
import ch.rodano.core.model.jooq.tables.Chart;
import ch.rodano.core.model.jooq.tables.ChartCategory;
import ch.rodano.core.model.jooq.tables.ChartColor;
import ch.rodano.core.model.jooq.tables.ChartState;
import ch.rodano.core.model.jooq.tables.Dataset;
import ch.rodano.core.model.jooq.tables.DatasetAudit;
import ch.rodano.core.model.jooq.tables.Event;
import ch.rodano.core.model.jooq.tables.EventAudit;
import ch.rodano.core.model.jooq.tables.Field;
import ch.rodano.core.model.jooq.tables.FieldAudit;
import ch.rodano.core.model.jooq.tables.File;
import ch.rodano.core.model.jooq.tables.Form;
import ch.rodano.core.model.jooq.tables.FormAudit;
import ch.rodano.core.model.jooq.tables.Mail;
import ch.rodano.core.model.jooq.tables.MailAttachment;
import ch.rodano.core.model.jooq.tables.Payment;
import ch.rodano.core.model.jooq.tables.PaymentBatch;
import ch.rodano.core.model.jooq.tables.PaymentTarget;
import ch.rodano.core.model.jooq.tables.Resource;
import ch.rodano.core.model.jooq.tables.Robot;
import ch.rodano.core.model.jooq.tables.RobotAudit;
import ch.rodano.core.model.jooq.tables.Role;
import ch.rodano.core.model.jooq.tables.RoleAudit;
import ch.rodano.core.model.jooq.tables.Scope;
import ch.rodano.core.model.jooq.tables.ScopeAudit;
import ch.rodano.core.model.jooq.tables.ScopeRelation;
import ch.rodano.core.model.jooq.tables.User;
import ch.rodano.core.model.jooq.tables.UserAudit;
import ch.rodano.core.model.jooq.tables.UserSession;
import ch.rodano.core.model.jooq.tables.WorkflowStatus;
import ch.rodano.core.model.jooq.tables.WorkflowStatusAudit;
import ch.rodano.core.model.jooq.tables.records.AuditActionRecord;
import ch.rodano.core.model.jooq.tables.records.ChartCategoryRecord;
import ch.rodano.core.model.jooq.tables.records.ChartColorRecord;
import ch.rodano.core.model.jooq.tables.records.ChartRecord;
import ch.rodano.core.model.jooq.tables.records.ChartStateRecord;
import ch.rodano.core.model.jooq.tables.records.DatasetAuditRecord;
import ch.rodano.core.model.jooq.tables.records.DatasetRecord;
import ch.rodano.core.model.jooq.tables.records.EventAuditRecord;
import ch.rodano.core.model.jooq.tables.records.EventRecord;
import ch.rodano.core.model.jooq.tables.records.FieldAuditRecord;
import ch.rodano.core.model.jooq.tables.records.FieldRecord;
import ch.rodano.core.model.jooq.tables.records.FileRecord;
import ch.rodano.core.model.jooq.tables.records.FormAuditRecord;
import ch.rodano.core.model.jooq.tables.records.FormRecord;
import ch.rodano.core.model.jooq.tables.records.MailAttachmentRecord;
import ch.rodano.core.model.jooq.tables.records.MailRecord;
import ch.rodano.core.model.jooq.tables.records.PaymentBatchRecord;
import ch.rodano.core.model.jooq.tables.records.PaymentRecord;
import ch.rodano.core.model.jooq.tables.records.PaymentTargetRecord;
import ch.rodano.core.model.jooq.tables.records.ResourceRecord;
import ch.rodano.core.model.jooq.tables.records.RobotAuditRecord;
import ch.rodano.core.model.jooq.tables.records.RobotRecord;
import ch.rodano.core.model.jooq.tables.records.RoleAuditRecord;
import ch.rodano.core.model.jooq.tables.records.RoleRecord;
import ch.rodano.core.model.jooq.tables.records.ScopeAuditRecord;
import ch.rodano.core.model.jooq.tables.records.ScopeRecord;
import ch.rodano.core.model.jooq.tables.records.ScopeRelationRecord;
import ch.rodano.core.model.jooq.tables.records.UserAuditRecord;
import ch.rodano.core.model.jooq.tables.records.UserRecord;
import ch.rodano.core.model.jooq.tables.records.UserSessionRecord;
import ch.rodano.core.model.jooq.tables.records.WorkflowStatusAuditRecord;
import ch.rodano.core.model.jooq.tables.records.WorkflowStatusRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Keys {

	// -------------------------------------------------------------------------
	// UNIQUE and PRIMARY KEY definitions
	// -------------------------------------------------------------------------

	public static final UniqueKey<AuditActionRecord> KEY_AUDIT_ACTION_PRIMARY = Internal.createUniqueKey(AuditAction.AUDIT_ACTION, DSL.name("KEY_audit_action_PRIMARY"), new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final UniqueKey<ChartRecord> KEY_CHART_PRIMARY = Internal.createUniqueKey(Chart.CHART, DSL.name("KEY_chart_PRIMARY"), new TableField[] { Chart.CHART.PK }, true);
	public static final UniqueKey<ChartCategoryRecord> KEY_CHART_CATEGORY_PRIMARY = Internal.createUniqueKey(ChartCategory.CHART_CATEGORY, DSL.name("KEY_chart_category_PRIMARY"), new TableField[] { ChartCategory.CHART_CATEGORY.PK }, true);
	public static final UniqueKey<ChartColorRecord> KEY_CHART_COLOR_PRIMARY = Internal.createUniqueKey(ChartColor.CHART_COLOR, DSL.name("KEY_chart_color_PRIMARY"), new TableField[] { ChartColor.CHART_COLOR.PK }, true);
	public static final UniqueKey<ChartStateRecord> KEY_CHART_STATE_PRIMARY = Internal.createUniqueKey(ChartState.CHART_STATE, DSL.name("KEY_chart_state_PRIMARY"), new TableField[] { ChartState.CHART_STATE.PK }, true);
	public static final UniqueKey<DatasetRecord> KEY_DATASET_PRIMARY = Internal.createUniqueKey(Dataset.DATASET, DSL.name("KEY_dataset_PRIMARY"), new TableField[] { Dataset.DATASET.PK }, true);
	public static final UniqueKey<DatasetRecord> KEY_DATASET_U_DATASET_ID = Internal.createUniqueKey(Dataset.DATASET, DSL.name("KEY_dataset_u_dataset_id"), new TableField[] { Dataset.DATASET.ID }, true);
	public static final UniqueKey<DatasetAuditRecord> KEY_DATASET_AUDIT_PRIMARY = Internal.createUniqueKey(DatasetAudit.DATASET_AUDIT, DSL.name("KEY_dataset_audit_PRIMARY"), new TableField[] { DatasetAudit.DATASET_AUDIT.PK }, true);
	public static final UniqueKey<EventRecord> KEY_EVENT_PRIMARY = Internal.createUniqueKey(Event.EVENT, DSL.name("KEY_event_PRIMARY"), new TableField[] { Event.EVENT.PK }, true);
	public static final UniqueKey<EventRecord> KEY_EVENT_U_EVENT_ID = Internal.createUniqueKey(Event.EVENT, DSL.name("KEY_event_u_event_id"), new TableField[] { Event.EVENT.ID }, true);
	public static final UniqueKey<EventAuditRecord> KEY_EVENT_AUDIT_PRIMARY = Internal.createUniqueKey(EventAudit.EVENT_AUDIT, DSL.name("KEY_event_audit_PRIMARY"), new TableField[] { EventAudit.EVENT_AUDIT.PK }, true);
	public static final UniqueKey<FieldRecord> KEY_FIELD_PRIMARY = Internal.createUniqueKey(Field.FIELD, DSL.name("KEY_field_PRIMARY"), new TableField[] { Field.FIELD.PK }, true);
	public static final UniqueKey<FieldAuditRecord> KEY_FIELD_AUDIT_PRIMARY = Internal.createUniqueKey(FieldAudit.FIELD_AUDIT, DSL.name("KEY_field_audit_PRIMARY"), new TableField[] { FieldAudit.FIELD_AUDIT.PK }, true);
	public static final UniqueKey<FileRecord> KEY_FILE_PRIMARY = Internal.createUniqueKey(File.FILE, DSL.name("KEY_file_PRIMARY"), new TableField[] { File.FILE.PK }, true);
	public static final UniqueKey<FileRecord> KEY_FILE_U_UUID = Internal.createUniqueKey(File.FILE, DSL.name("KEY_file_u_uuid"), new TableField[] { File.FILE.UUID }, true);
	public static final UniqueKey<FormRecord> KEY_FORM_PRIMARY = Internal.createUniqueKey(Form.FORM, DSL.name("KEY_form_PRIMARY"), new TableField[] { Form.FORM.PK }, true);
	public static final UniqueKey<FormAuditRecord> KEY_FORM_AUDIT_PRIMARY = Internal.createUniqueKey(FormAudit.FORM_AUDIT, DSL.name("KEY_form_audit_PRIMARY"), new TableField[] { FormAudit.FORM_AUDIT.PK }, true);
	public static final UniqueKey<MailRecord> KEY_MAIL_PRIMARY = Internal.createUniqueKey(Mail.MAIL, DSL.name("KEY_mail_PRIMARY"), new TableField[] { Mail.MAIL.PK }, true);
	public static final UniqueKey<MailAttachmentRecord> KEY_MAIL_ATTACHMENT_PRIMARY = Internal.createUniqueKey(MailAttachment.MAIL_ATTACHMENT, DSL.name("KEY_mail_attachment_PRIMARY"), new TableField[] { MailAttachment.MAIL_ATTACHMENT.PK }, true);
	public static final UniqueKey<PaymentRecord> KEY_PAYMENT_PRIMARY = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("KEY_payment_PRIMARY"), new TableField[] { Payment.PAYMENT.PK }, true);
	public static final UniqueKey<PaymentBatchRecord> KEY_PAYMENT_BATCH_PRIMARY = Internal.createUniqueKey(PaymentBatch.PAYMENT_BATCH, DSL.name("KEY_payment_batch_PRIMARY"), new TableField[] { PaymentBatch.PAYMENT_BATCH.PK }, true);
	public static final UniqueKey<PaymentTargetRecord> KEY_PAYMENT_TARGET_PRIMARY = Internal.createUniqueKey(PaymentTarget.PAYMENT_TARGET, DSL.name("KEY_payment_target_PRIMARY"), new TableField[] { PaymentTarget.PAYMENT_TARGET.PK }, true);
	public static final UniqueKey<ResourceRecord> KEY_RESOURCE_PRIMARY = Internal.createUniqueKey(Resource.RESOURCE, DSL.name("KEY_resource_PRIMARY"), new TableField[] { Resource.RESOURCE.PK }, true);
	public static final UniqueKey<ResourceRecord> KEY_RESOURCE_U_RESOURCE_UUID = Internal.createUniqueKey(Resource.RESOURCE, DSL.name("KEY_resource_u_resource_uuid"), new TableField[] { Resource.RESOURCE.UUID }, true);
	public static final UniqueKey<RobotRecord> KEY_ROBOT_PRIMARY = Internal.createUniqueKey(Robot.ROBOT, DSL.name("KEY_robot_PRIMARY"), new TableField[] { Robot.ROBOT.PK }, true);
	public static final UniqueKey<RobotRecord> KEY_ROBOT_U_ROBOT_KEY = Internal.createUniqueKey(Robot.ROBOT, DSL.name("KEY_robot_u_robot_key"), new TableField[] { Robot.ROBOT.KEY }, true);
	public static final UniqueKey<RobotRecord> KEY_ROBOT_U_ROBOT_NAME = Internal.createUniqueKey(Robot.ROBOT, DSL.name("KEY_robot_u_robot_name"), new TableField[] { Robot.ROBOT.NAME }, true);
	public static final UniqueKey<RobotAuditRecord> KEY_ROBOT_AUDIT_PRIMARY = Internal.createUniqueKey(RobotAudit.ROBOT_AUDIT, DSL.name("KEY_robot_audit_PRIMARY"), new TableField[] { RobotAudit.ROBOT_AUDIT.PK }, true);
	public static final UniqueKey<RoleRecord> KEY_ROLE_PRIMARY = Internal.createUniqueKey(Role.ROLE, DSL.name("KEY_role_PRIMARY"), new TableField[] { Role.ROLE.PK }, true);
	public static final UniqueKey<RoleAuditRecord> KEY_ROLE_AUDIT_PRIMARY = Internal.createUniqueKey(RoleAudit.ROLE_AUDIT, DSL.name("KEY_role_audit_PRIMARY"), new TableField[] { RoleAudit.ROLE_AUDIT.PK }, true);
	public static final UniqueKey<ScopeRecord> KEY_SCOPE_PRIMARY = Internal.createUniqueKey(Scope.SCOPE, DSL.name("KEY_scope_PRIMARY"), new TableField[] { Scope.SCOPE.PK }, true);
	public static final UniqueKey<ScopeRecord> KEY_SCOPE_U_SCOPE_CODE = Internal.createUniqueKey(Scope.SCOPE, DSL.name("KEY_scope_u_scope_code"), new TableField[] { Scope.SCOPE.CODE }, true);
	public static final UniqueKey<ScopeRecord> KEY_SCOPE_U_SCOPE_ID = Internal.createUniqueKey(Scope.SCOPE, DSL.name("KEY_scope_u_scope_id"), new TableField[] { Scope.SCOPE.ID }, true);
	public static final UniqueKey<ScopeAuditRecord> KEY_SCOPE_AUDIT_PRIMARY = Internal.createUniqueKey(ScopeAudit.SCOPE_AUDIT, DSL.name("KEY_scope_audit_PRIMARY"), new TableField[] { ScopeAudit.SCOPE_AUDIT.PK }, true);
	public static final UniqueKey<ScopeRelationRecord> KEY_SCOPE_RELATION_PRIMARY = Internal.createUniqueKey(ScopeRelation.SCOPE_RELATION, DSL.name("KEY_scope_relation_PRIMARY"), new TableField[] { ScopeRelation.SCOPE_RELATION.PK }, true);
	public static final UniqueKey<UserRecord> KEY_USER_PRIMARY = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_PRIMARY"), new TableField[] { User.USER.PK }, true);
	public static final UniqueKey<UserRecord> KEY_USER_U_EMAIL = Internal.createUniqueKey(User.USER, DSL.name("KEY_user_u_email"), new TableField[] { User.USER.EMAIL }, true);
	public static final UniqueKey<UserAuditRecord> KEY_USER_AUDIT_PRIMARY = Internal.createUniqueKey(UserAudit.USER_AUDIT, DSL.name("KEY_user_audit_PRIMARY"), new TableField[] { UserAudit.USER_AUDIT.PK }, true);
	public static final UniqueKey<UserSessionRecord> KEY_USER_SESSION_PRIMARY = Internal.createUniqueKey(UserSession.USER_SESSION, DSL.name("KEY_user_session_PRIMARY"), new TableField[] { UserSession.USER_SESSION.PK }, true);
	public static final UniqueKey<WorkflowStatusRecord> KEY_WORKFLOW_STATUS_PRIMARY = Internal.createUniqueKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("KEY_workflow_status_PRIMARY"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.PK }, true);
	public static final UniqueKey<WorkflowStatusAuditRecord> KEY_WORKFLOW_STATUS_AUDIT_PRIMARY = Internal.createUniqueKey(WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT, DSL.name("KEY_workflow_status_audit_PRIMARY"), new TableField[] { WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT.PK }, true);

	// -------------------------------------------------------------------------
	// FOREIGN KEY definitions
	// -------------------------------------------------------------------------

	public static final ForeignKey<AuditActionRecord, RobotRecord> FK_AUDIT_ACTION_ROBOT_FK = Internal.createForeignKey(AuditAction.AUDIT_ACTION, DSL.name("fk_audit_action_robot_fk"), new TableField[] { AuditAction.AUDIT_ACTION.ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<AuditActionRecord, UserRecord> FK_AUDIT_ACTION_USER_FK = Internal.createForeignKey(AuditAction.AUDIT_ACTION, DSL.name("fk_audit_action_user_fk"), new TableField[] { AuditAction.AUDIT_ACTION.USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<DatasetRecord, EventRecord> FK_DATASET_EVENT_FK = Internal.createForeignKey(Dataset.DATASET, DSL.name("fk_dataset_event_fk"), new TableField[] { Dataset.DATASET.EVENT_FK }, Keys.KEY_EVENT_PRIMARY, new TableField[] { Event.EVENT.PK }, true);
	public static final ForeignKey<DatasetRecord, ScopeRecord> FK_DATASET_SCOPE_FK = Internal.createForeignKey(Dataset.DATASET, DSL.name("fk_dataset_scope_fk"), new TableField[] { Dataset.DATASET.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<DatasetAuditRecord, DatasetRecord> FK_DATASET_AUDIT_OBJECT_FK = Internal.createForeignKey(DatasetAudit.DATASET_AUDIT, DSL.name("fk_dataset_audit_object_fk"), new TableField[] { DatasetAudit.DATASET_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_DATASET_PRIMARY, new TableField[] { Dataset.DATASET.PK }, true);
	public static final ForeignKey<DatasetAuditRecord, RobotRecord> FK_DATASET_AUDIT_ROBOT_FK = Internal.createForeignKey(DatasetAudit.DATASET_AUDIT, DSL.name("fk_dataset_audit_robot_fk"), new TableField[] { DatasetAudit.DATASET_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<DatasetAuditRecord, UserRecord> FK_DATASET_AUDIT_USER_FK = Internal.createForeignKey(DatasetAudit.DATASET_AUDIT, DSL.name("fk_dataset_audit_user_fk"), new TableField[] { DatasetAudit.DATASET_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<DatasetAuditRecord, AuditActionRecord> FK_DATASET_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(DatasetAudit.DATASET_AUDIT, DSL.name("fk_dataset_trail_audit_action_fk"), new TableField[] { DatasetAudit.DATASET_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<EventRecord, ScopeRecord> FK_EVENT_SCOPE_FK = Internal.createForeignKey(Event.EVENT, DSL.name("fk_event_scope_fk"), new TableField[] { Event.EVENT.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<EventAuditRecord, EventRecord> FK_EVENT_AUDIT_OBJECT_FK = Internal.createForeignKey(EventAudit.EVENT_AUDIT, DSL.name("fk_event_audit_object_fk"), new TableField[] { EventAudit.EVENT_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_EVENT_PRIMARY, new TableField[] { Event.EVENT.PK }, true);
	public static final ForeignKey<EventAuditRecord, RobotRecord> FK_EVENT_AUDIT_ROBOT_FK = Internal.createForeignKey(EventAudit.EVENT_AUDIT, DSL.name("fk_event_audit_robot_fk"), new TableField[] { EventAudit.EVENT_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<EventAuditRecord, UserRecord> FK_EVENT_AUDIT_USER_FK = Internal.createForeignKey(EventAudit.EVENT_AUDIT, DSL.name("fk_event_audit_user_fk"), new TableField[] { EventAudit.EVENT_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<EventAuditRecord, AuditActionRecord> FK_EVENT_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(EventAudit.EVENT_AUDIT, DSL.name("fk_event_trail_audit_action_fk"), new TableField[] { EventAudit.EVENT_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<FieldRecord, DatasetRecord> FK_FIELD_DATASET_FK = Internal.createForeignKey(Field.FIELD, DSL.name("fk_field_dataset_fk"), new TableField[] { Field.FIELD.DATASET_FK }, Keys.KEY_DATASET_PRIMARY, new TableField[] { Dataset.DATASET.PK }, true);
	public static final ForeignKey<FieldAuditRecord, FieldRecord> FK_FIELD_AUDIT_OBJECT_FK = Internal.createForeignKey(FieldAudit.FIELD_AUDIT, DSL.name("fk_field_audit_object_fk"), new TableField[] { FieldAudit.FIELD_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_FIELD_PRIMARY, new TableField[] { Field.FIELD.PK }, true);
	public static final ForeignKey<FieldAuditRecord, RobotRecord> FK_FIELD_AUDIT_ROBOT_FK = Internal.createForeignKey(FieldAudit.FIELD_AUDIT, DSL.name("fk_field_audit_robot_fk"), new TableField[] { FieldAudit.FIELD_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<FieldAuditRecord, UserRecord> FK_FIELD_AUDIT_USER_FK = Internal.createForeignKey(FieldAudit.FIELD_AUDIT, DSL.name("fk_field_audit_user_fk"), new TableField[] { FieldAudit.FIELD_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<FieldAuditRecord, AuditActionRecord> FK_FIELD_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(FieldAudit.FIELD_AUDIT, DSL.name("fk_field_trail_audit_action_fk"), new TableField[] { FieldAudit.FIELD_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<FileRecord, DatasetRecord> FK_FILE_DATASET_FK = Internal.createForeignKey(File.FILE, DSL.name("fk_file_dataset_fk"), new TableField[] { File.FILE.DATASET_FK }, Keys.KEY_DATASET_PRIMARY, new TableField[] { Dataset.DATASET.PK }, true);
	public static final ForeignKey<FileRecord, EventRecord> FK_FILE_EVENT_FK = Internal.createForeignKey(File.FILE, DSL.name("fk_file_event_fk"), new TableField[] { File.FILE.EVENT_FK }, Keys.KEY_EVENT_PRIMARY, new TableField[] { Event.EVENT.PK }, true);
	public static final ForeignKey<FileRecord, FieldRecord> FK_FILE_FIELD_FK = Internal.createForeignKey(File.FILE, DSL.name("fk_file_field_fk"), new TableField[] { File.FILE.FIELD_FK }, Keys.KEY_FIELD_PRIMARY, new TableField[] { Field.FIELD.PK }, true);
	public static final ForeignKey<FileRecord, ScopeRecord> FK_FILE_SCOPE_FK = Internal.createForeignKey(File.FILE, DSL.name("fk_file_scope_fk"), new TableField[] { File.FILE.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<FileRecord, UserRecord> FK_FILE_USER_FK = Internal.createForeignKey(File.FILE, DSL.name("fk_file_user_fk"), new TableField[] { File.FILE.USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<FormRecord, EventRecord> FK_FORM_EVENT_FK = Internal.createForeignKey(Form.FORM, DSL.name("fk_form_event_fk"), new TableField[] { Form.FORM.EVENT_FK }, Keys.KEY_EVENT_PRIMARY, new TableField[] { Event.EVENT.PK }, true);
	public static final ForeignKey<FormRecord, ScopeRecord> FK_FORM_SCOPE_FK = Internal.createForeignKey(Form.FORM, DSL.name("fk_form_scope_fk"), new TableField[] { Form.FORM.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<FormAuditRecord, FormRecord> FK_FORM_AUDIT_OBJECT_FK = Internal.createForeignKey(FormAudit.FORM_AUDIT, DSL.name("fk_form_audit_object_fk"), new TableField[] { FormAudit.FORM_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_FORM_PRIMARY, new TableField[] { Form.FORM.PK }, true);
	public static final ForeignKey<FormAuditRecord, RobotRecord> FK_FORM_AUDIT_ROBOT_FK = Internal.createForeignKey(FormAudit.FORM_AUDIT, DSL.name("fk_form_audit_robot_fk"), new TableField[] { FormAudit.FORM_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<FormAuditRecord, UserRecord> FK_FORM_AUDIT_USER_FK = Internal.createForeignKey(FormAudit.FORM_AUDIT, DSL.name("fk_form_audit_user_fk"), new TableField[] { FormAudit.FORM_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<FormAuditRecord, AuditActionRecord> FK_FORM_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(FormAudit.FORM_AUDIT, DSL.name("fk_form_trail_audit_action_fk"), new TableField[] { FormAudit.FORM_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<MailAttachmentRecord, MailRecord> FK_MAIL_ATTACHMENT_MAIL_FK = Internal.createForeignKey(MailAttachment.MAIL_ATTACHMENT, DSL.name("fk_mail_attachment_mail_fk"), new TableField[] { MailAttachment.MAIL_ATTACHMENT.MAIL_FK }, Keys.KEY_MAIL_PRIMARY, new TableField[] { Mail.MAIL.PK }, true);
	public static final ForeignKey<PaymentRecord, PaymentBatchRecord> FK_PAYMENT_PAYMENT_BATCH_FK = Internal.createForeignKey(Payment.PAYMENT, DSL.name("fk_payment_payment_batch_fk"), new TableField[] { Payment.PAYMENT.PAYMENT_BATCH_FK }, Keys.KEY_PAYMENT_BATCH_PRIMARY, new TableField[] { PaymentBatch.PAYMENT_BATCH.PK }, true);
	public static final ForeignKey<PaymentRecord, WorkflowStatusRecord> FK_PAYMENT_WORKFLOW_STATUS_FK = Internal.createForeignKey(Payment.PAYMENT, DSL.name("fk_payment_workflow_status_fk"), new TableField[] { Payment.PAYMENT.WORKFLOW_STATUS_FK }, Keys.KEY_WORKFLOW_STATUS_PRIMARY, new TableField[] { WorkflowStatus.WORKFLOW_STATUS.PK }, true);
	public static final ForeignKey<PaymentTargetRecord, PaymentRecord> FK_PAYMENT_TARGET_PAYMENT_FK = Internal.createForeignKey(PaymentTarget.PAYMENT_TARGET, DSL.name("fk_payment_target_payment_fk"), new TableField[] { PaymentTarget.PAYMENT_TARGET.PAYMENT_FK }, Keys.KEY_PAYMENT_PRIMARY, new TableField[] { Payment.PAYMENT.PK }, true);
	public static final ForeignKey<ResourceRecord, ScopeRecord> FK_RESOURCE_SCOPE_FK = Internal.createForeignKey(Resource.RESOURCE, DSL.name("fk_resource_scope_fk"), new TableField[] { Resource.RESOURCE.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<ResourceRecord, UserRecord> FK_RESOURCE_USER_FK = Internal.createForeignKey(Resource.RESOURCE, DSL.name("fk_resource_user_fk"), new TableField[] { Resource.RESOURCE.USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<RobotAuditRecord, RobotRecord> FK_ROBOT_AUDIT_AUDIT_OBJECT_FK = Internal.createForeignKey(RobotAudit.ROBOT_AUDIT, DSL.name("fk_robot_audit_audit_object_fk"), new TableField[] { RobotAudit.ROBOT_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<RobotAuditRecord, RobotRecord> FK_ROBOT_AUDIT_ROBOT_FK = Internal.createForeignKey(RobotAudit.ROBOT_AUDIT, DSL.name("fk_robot_audit_robot_fk"), new TableField[] { RobotAudit.ROBOT_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<RobotAuditRecord, UserRecord> FK_ROBOT_AUDIT_USER_FK = Internal.createForeignKey(RobotAudit.ROBOT_AUDIT, DSL.name("fk_robot_audit_user_fk"), new TableField[] { RobotAudit.ROBOT_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<RobotAuditRecord, AuditActionRecord> FK_ROBOT_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(RobotAudit.ROBOT_AUDIT, DSL.name("fk_robot_trail_audit_action_fk"), new TableField[] { RobotAudit.ROBOT_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<RoleRecord, RobotRecord> FK_ROLE_ROBOT_FK = Internal.createForeignKey(Role.ROLE, DSL.name("fk_role_robot_fk"), new TableField[] { Role.ROLE.ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<RoleRecord, ScopeRecord> FK_ROLE_SCOPE_FK = Internal.createForeignKey(Role.ROLE, DSL.name("fk_role_scope_fk"), new TableField[] { Role.ROLE.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<RoleRecord, UserRecord> FK_ROLE_USER_FK = Internal.createForeignKey(Role.ROLE, DSL.name("fk_role_user_fk"), new TableField[] { Role.ROLE.USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<RoleAuditRecord, RoleRecord> FK_ROLE_AUDIT_AUDIT_OBJECT_FK = Internal.createForeignKey(RoleAudit.ROLE_AUDIT, DSL.name("fk_role_audit_audit_object_fk"), new TableField[] { RoleAudit.ROLE_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_ROLE_PRIMARY, new TableField[] { Role.ROLE.PK }, true);
	public static final ForeignKey<RoleAuditRecord, RobotRecord> FK_ROLE_AUDIT_ROBOT_FK = Internal.createForeignKey(RoleAudit.ROLE_AUDIT, DSL.name("fk_role_audit_robot_fk"), new TableField[] { RoleAudit.ROLE_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<RoleAuditRecord, UserRecord> FK_ROLE_AUDIT_USER_FK = Internal.createForeignKey(RoleAudit.ROLE_AUDIT, DSL.name("fk_role_audit_user_fk"), new TableField[] { RoleAudit.ROLE_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<RoleAuditRecord, AuditActionRecord> FK_ROLE_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(RoleAudit.ROLE_AUDIT, DSL.name("fk_role_trail_audit_action_fk"), new TableField[] { RoleAudit.ROLE_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<ScopeAuditRecord, ScopeRecord> FK_SCOPE_AUDIT_OBJECT_FK = Internal.createForeignKey(ScopeAudit.SCOPE_AUDIT, DSL.name("fk_scope_audit_object_fk"), new TableField[] { ScopeAudit.SCOPE_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<ScopeAuditRecord, RobotRecord> FK_SCOPE_AUDIT_ROBOT_FK = Internal.createForeignKey(ScopeAudit.SCOPE_AUDIT, DSL.name("fk_scope_audit_robot_fk"), new TableField[] { ScopeAudit.SCOPE_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<ScopeAuditRecord, UserRecord> FK_SCOPE_AUDIT_USER_FK = Internal.createForeignKey(ScopeAudit.SCOPE_AUDIT, DSL.name("fk_scope_audit_user_fk"), new TableField[] { ScopeAudit.SCOPE_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<ScopeAuditRecord, AuditActionRecord> FK_SCOPE_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(ScopeAudit.SCOPE_AUDIT, DSL.name("fk_scope_trail_audit_action_fk"), new TableField[] { ScopeAudit.SCOPE_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<ScopeRelationRecord, ScopeRecord> FK_SCOPE_RELATION_PARENT_FK = Internal.createForeignKey(ScopeRelation.SCOPE_RELATION, DSL.name("fk_scope_relation_parent_fk"), new TableField[] { ScopeRelation.SCOPE_RELATION.PARENT_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<ScopeRelationRecord, ScopeRecord> FK_SCOPE_RELATION_SCOPE_FK = Internal.createForeignKey(ScopeRelation.SCOPE_RELATION, DSL.name("fk_scope_relation_scope_fk"), new TableField[] { ScopeRelation.SCOPE_RELATION.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<UserAuditRecord, UserRecord> FK_USER_AUDIT_AUDIT_OBJECT_FK = Internal.createForeignKey(UserAudit.USER_AUDIT, DSL.name("fk_user_audit_audit_object_fk"), new TableField[] { UserAudit.USER_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<UserAuditRecord, RobotRecord> FK_USER_AUDIT_ROBOT_FK = Internal.createForeignKey(UserAudit.USER_AUDIT, DSL.name("fk_user_audit_robot_fk"), new TableField[] { UserAudit.USER_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<UserAuditRecord, UserRecord> FK_USER_AUDIT_USER_FK = Internal.createForeignKey(UserAudit.USER_AUDIT, DSL.name("fk_user_audit_user_fk"), new TableField[] { UserAudit.USER_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<UserAuditRecord, AuditActionRecord> FK_USER_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(UserAudit.USER_AUDIT, DSL.name("fk_user_trail_audit_action_fk"), new TableField[] { UserAudit.USER_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
	public static final ForeignKey<UserSessionRecord, UserRecord> FK_USER_SESSION_USER_FK = Internal.createForeignKey(UserSession.USER_SESSION, DSL.name("fk_user_session_user_fk"), new TableField[] { UserSession.USER_SESSION.USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<WorkflowStatusRecord, EventRecord> FK_WORKFLOW_STATUS_EVENT_FK = Internal.createForeignKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("fk_workflow_status_event_fk"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.EVENT_FK }, Keys.KEY_EVENT_PRIMARY, new TableField[] { Event.EVENT.PK }, true);
	public static final ForeignKey<WorkflowStatusRecord, FieldRecord> FK_WORKFLOW_STATUS_FIELD_FK = Internal.createForeignKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("fk_workflow_status_field_fk"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.FIELD_FK }, Keys.KEY_FIELD_PRIMARY, new TableField[] { Field.FIELD.PK }, true);
	public static final ForeignKey<WorkflowStatusRecord, FormRecord> FK_WORKFLOW_STATUS_FORM_FK = Internal.createForeignKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("fk_workflow_status_form_fk"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.FORM_FK }, Keys.KEY_FORM_PRIMARY, new TableField[] { Form.FORM.PK }, true);
	public static final ForeignKey<WorkflowStatusRecord, RobotRecord> FK_WORKFLOW_STATUS_ROBOT_FK = Internal.createForeignKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("fk_workflow_status_robot_fk"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<WorkflowStatusRecord, ScopeRecord> FK_WORKFLOW_STATUS_SCOPE_FK = Internal.createForeignKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("fk_workflow_status_scope_fk"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.SCOPE_FK }, Keys.KEY_SCOPE_PRIMARY, new TableField[] { Scope.SCOPE.PK }, true);
	public static final ForeignKey<WorkflowStatusRecord, UserRecord> FK_WORKFLOW_STATUS_USER_FK = Internal.createForeignKey(WorkflowStatus.WORKFLOW_STATUS, DSL.name("fk_workflow_status_user_fk"), new TableField[] { WorkflowStatus.WORKFLOW_STATUS.USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<WorkflowStatusAuditRecord, WorkflowStatusRecord> FK_WORKFLOW_STATUS_AUDIT_OBJECT_FK = Internal.createForeignKey(WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT, DSL.name("fk_workflow_status_audit_object_fk"), new TableField[] { WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT.AUDIT_OBJECT_FK }, Keys.KEY_WORKFLOW_STATUS_PRIMARY, new TableField[] { WorkflowStatus.WORKFLOW_STATUS.PK }, true);
	public static final ForeignKey<WorkflowStatusAuditRecord, RobotRecord> FK_WORKFLOW_STATUS_AUDIT_ROBOT_FK = Internal.createForeignKey(WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT, DSL.name("fk_workflow_status_audit_robot_fk"), new TableField[] { WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT.AUDIT_ROBOT_FK }, Keys.KEY_ROBOT_PRIMARY, new TableField[] { Robot.ROBOT.PK }, true);
	public static final ForeignKey<WorkflowStatusAuditRecord, UserRecord> FK_WORKFLOW_STATUS_AUDIT_USER_FK = Internal.createForeignKey(WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT, DSL.name("fk_workflow_status_audit_user_fk"), new TableField[] { WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT.AUDIT_USER_FK }, Keys.KEY_USER_PRIMARY, new TableField[] { User.USER.PK }, true);
	public static final ForeignKey<WorkflowStatusAuditRecord, AuditActionRecord> FK_WORKFLOW_STATUS_TRAIL_AUDIT_ACTION_FK = Internal.createForeignKey(WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT, DSL.name("fk_workflow_status_trail_audit_action_fk"), new TableField[] { WorkflowStatusAudit.WORKFLOW_STATUS_AUDIT.AUDIT_ACTION_FK }, Keys.KEY_AUDIT_ACTION_PRIMARY, new TableField[] { AuditAction.AUDIT_ACTION.PK }, true);
}
