/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Scope.ScopePath;
import ch.rodano.core.model.jooq.tables.records.ScopeRelationRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ScopeRelation extends TableImpl<ScopeRelationRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>scope_relation</code>
	 */
	public static final ScopeRelation SCOPE_RELATION = new ScopeRelation();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ScopeRelationRecord> getRecordType() {
		return ScopeRelationRecord.class;
	}

	/**
	 * The column <code>scope_relation.pk</code>.
	 */
	public final TableField<ScopeRelationRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>scope_relation.creation_time</code>.
	 */
	public final TableField<ScopeRelationRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope_relation.last_update_time</code>.
	 */
	public final TableField<ScopeRelationRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope_relation.scope_fk</code>.
	 */
	public final TableField<ScopeRelationRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>scope_relation.parent_fk</code>.
	 */
	public final TableField<ScopeRelationRecord, Long> PARENT_FK = createField(DSL.name("parent_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>scope_relation.start_date</code>.
	 */
	public final TableField<ScopeRelationRecord, ZonedDateTime> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope_relation.end_date</code>.
	 */
	public final TableField<ScopeRelationRecord, ZonedDateTime> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>scope_relation.default</code>.
	 */
	public final TableField<ScopeRelationRecord, Boolean> DEFAULT = createField(DSL.name("default"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	private ScopeRelation(Name alias, Table<ScopeRelationRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private ScopeRelation(Name alias, Table<ScopeRelationRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>scope_relation</code> table reference
	 */
	public ScopeRelation(String alias) {
		this(DSL.name(alias), SCOPE_RELATION);
	}

	/**
	 * Create an aliased <code>scope_relation</code> table reference
	 */
	public ScopeRelation(Name alias) {
		this(alias, SCOPE_RELATION);
	}

	/**
	 * Create a <code>scope_relation</code> table reference
	 */
	public ScopeRelation() {
		this(DSL.name("scope_relation"), null);
	}

	public <O extends Record> ScopeRelation(Table<O> path, ForeignKey<O, ScopeRelationRecord> childPath, InverseForeignKey<O, ScopeRelationRecord> parentPath) {
		super(path, childPath, parentPath, SCOPE_RELATION);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class ScopeRelationPath extends ScopeRelation implements Path<ScopeRelationRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> ScopeRelationPath(Table<O> path, ForeignKey<O, ScopeRelationRecord> childPath, InverseForeignKey<O, ScopeRelationRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private ScopeRelationPath(Name alias, Table<ScopeRelationRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public ScopeRelationPath as(String alias) {
			return new ScopeRelationPath(DSL.name(alias), this);
		}

		@Override
		public ScopeRelationPath as(Name alias) {
			return new ScopeRelationPath(alias, this);
		}

		@Override
		public ScopeRelationPath as(Table<?> alias) {
			return new ScopeRelationPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<ScopeRelationRecord, Long> getIdentity() {
		return (Identity<ScopeRelationRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ScopeRelationRecord> getPrimaryKey() {
		return Keys.KEY_SCOPE_RELATION_PRIMARY;
	}

	@Override
	public List<ForeignKey<ScopeRelationRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_SCOPE_RELATION_PARENT_FK, Keys.FK_SCOPE_RELATION_SCOPE_FK);
	}

	private transient ScopePath _fkScopeRelationParentFk;

	/**
	 * Get the implicit join path to the <code>scope</code> table, via the
	 * <code>fk_scope_relation_parent_fk</code> key.
	 */
	public ScopePath fkScopeRelationParentFk() {
		if (_fkScopeRelationParentFk == null)
			_fkScopeRelationParentFk = new ScopePath(this, Keys.FK_SCOPE_RELATION_PARENT_FK, null);

		return _fkScopeRelationParentFk;
	}

	private transient ScopePath _fkScopeRelationScopeFk;

	/**
	 * Get the implicit join path to the <code>scope</code> table, via the
	 * <code>fk_scope_relation_scope_fk</code> key.
	 */
	public ScopePath fkScopeRelationScopeFk() {
		if (_fkScopeRelationScopeFk == null)
			_fkScopeRelationScopeFk = new ScopePath(this, Keys.FK_SCOPE_RELATION_SCOPE_FK, null);

		return _fkScopeRelationScopeFk;
	}

	@Override
	public ScopeRelation as(String alias) {
		return new ScopeRelation(DSL.name(alias), this);
	}

	@Override
	public ScopeRelation as(Name alias) {
		return new ScopeRelation(alias, this);
	}

	@Override
	public ScopeRelation as(Table<?> alias) {
		return new ScopeRelation(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ScopeRelation rename(String name) {
		return new ScopeRelation(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ScopeRelation rename(Name name) {
		return new ScopeRelation(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ScopeRelation rename(Table<?> name) {
		return new ScopeRelation(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeRelation where(Condition condition) {
		return new ScopeRelation(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeRelation where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeRelation where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeRelation where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeRelation where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeRelation where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeRelation where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ScopeRelation where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeRelation whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ScopeRelation whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
