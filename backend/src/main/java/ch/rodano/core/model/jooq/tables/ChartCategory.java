/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.records.ChartCategoryRecord;

import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChartCategory extends TableImpl<ChartCategoryRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>chart_category</code>
	 */
	public static final ChartCategory CHART_CATEGORY = new ChartCategory();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ChartCategoryRecord> getRecordType() {
		return ChartCategoryRecord.class;
	}

	/**
	 * The column <code>chart_category.pk</code>.
	 */
	public final TableField<ChartCategoryRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>chart_category.chart_fk</code>.
	 */
	public final TableField<ChartCategoryRecord, Long> CHART_FK = createField(DSL.name("chart_fk"), SQLDataType.BIGINT.nullable(false), this, "");

	/**
	 * The column <code>chart_category.label</code>.
	 */
	public final TableField<ChartCategoryRecord, String> LABEL = createField(DSL.name("label"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart_category.min</code>.
	 */
	public final TableField<ChartCategoryRecord, String> MIN = createField(DSL.name("min"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart_category.max</code>.
	 */
	public final TableField<ChartCategoryRecord, String> MAX = createField(DSL.name("max"), SQLDataType.VARCHAR(100).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>chart_category.show</code>.
	 */
	public final TableField<ChartCategoryRecord, Boolean> SHOW = createField(DSL.name("show"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BOOLEAN)), this, "");

	private ChartCategory(Name alias, Table<ChartCategoryRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private ChartCategory(Name alias, Table<ChartCategoryRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>chart_category</code> table reference
	 */
	public ChartCategory(String alias) {
		this(DSL.name(alias), CHART_CATEGORY);
	}

	/**
	 * Create an aliased <code>chart_category</code> table reference
	 */
	public ChartCategory(Name alias) {
		this(alias, CHART_CATEGORY);
	}

	/**
	 * Create a <code>chart_category</code> table reference
	 */
	public ChartCategory() {
		this(DSL.name("chart_category"), null);
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public Identity<ChartCategoryRecord, Long> getIdentity() {
		return (Identity<ChartCategoryRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ChartCategoryRecord> getPrimaryKey() {
		return Keys.KEY_CHART_CATEGORY_PRIMARY;
	}

	@Override
	public ChartCategory as(String alias) {
		return new ChartCategory(DSL.name(alias), this);
	}

	@Override
	public ChartCategory as(Name alias) {
		return new ChartCategory(alias, this);
	}

	@Override
	public ChartCategory as(Table<?> alias) {
		return new ChartCategory(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ChartCategory rename(String name) {
		return new ChartCategory(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ChartCategory rename(Name name) {
		return new ChartCategory(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ChartCategory rename(Table<?> name) {
		return new ChartCategory(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartCategory where(Condition condition) {
		return new ChartCategory(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartCategory where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartCategory where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartCategory where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartCategory where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartCategory where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartCategory where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public ChartCategory where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartCategory whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public ChartCategory whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
