/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.Event.EventPath;
import ch.rodano.core.model.jooq.tables.FormAudit.FormAuditPath;
import ch.rodano.core.model.jooq.tables.Scope.ScopePath;
import ch.rodano.core.model.jooq.tables.WorkflowStatus.WorkflowStatusPath;
import ch.rodano.core.model.jooq.tables.records.FormRecord;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Form extends TableImpl<FormRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>form</code>
	 */
	public static final Form FORM = new Form();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<FormRecord> getRecordType() {
		return FormRecord.class;
	}

	/**
	 * The column <code>form.pk</code>.
	 */
	public final TableField<FormRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>form.creation_time</code>.
	 */
	public final TableField<FormRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>form.last_update_time</code>.
	 */
	public final TableField<FormRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>form.deleted</code>.
	 */
	public final TableField<FormRecord, Boolean> DELETED = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.BOOLEAN)), this, "");

	/**
	 * The column <code>form.scope_fk</code>.
	 */
	public final TableField<FormRecord, Long> SCOPE_FK = createField(DSL.name("scope_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>form.event_fk</code>.
	 */
	public final TableField<FormRecord, Long> EVENT_FK = createField(DSL.name("event_fk"), SQLDataType.BIGINT.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.BIGINT)), this, "");

	/**
	 * The column <code>form.form_model_id</code>.
	 */
	public final TableField<FormRecord, String> FORM_MODEL_ID = createField(DSL.name("form_model_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

	private Form(Name alias, Table<FormRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Form(Name alias, Table<FormRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>form</code> table reference
	 */
	public Form(String alias) {
		this(DSL.name(alias), FORM);
	}

	/**
	 * Create an aliased <code>form</code> table reference
	 */
	public Form(Name alias) {
		this(alias, FORM);
	}

	/**
	 * Create a <code>form</code> table reference
	 */
	public Form() {
		this(DSL.name("form"), null);
	}

	public <O extends Record> Form(Table<O> path, ForeignKey<O, FormRecord> childPath, InverseForeignKey<O, FormRecord> parentPath) {
		super(path, childPath, parentPath, FORM);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class FormPath extends Form implements Path<FormRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> FormPath(Table<O> path, ForeignKey<O, FormRecord> childPath, InverseForeignKey<O, FormRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private FormPath(Name alias, Table<FormRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public FormPath as(String alias) {
			return new FormPath(DSL.name(alias), this);
		}

		@Override
		public FormPath as(Name alias) {
			return new FormPath(alias, this);
		}

		@Override
		public FormPath as(Table<?> alias) {
			return new FormPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.FORM_IDX_FORM_DELETED);
	}

	@Override
	public Identity<FormRecord, Long> getIdentity() {
		return (Identity<FormRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<FormRecord> getPrimaryKey() {
		return Keys.KEY_FORM_PRIMARY;
	}

	@Override
	public List<ForeignKey<FormRecord, ?>> getReferences() {
		return Arrays.asList(Keys.FK_FORM_EVENT_FK, Keys.FK_FORM_SCOPE_FK);
	}

	private transient EventPath _event;

	/**
	 * Get the implicit join path to the <code>event</code> table.
	 */
	public EventPath event() {
		if (_event == null)
			_event = new EventPath(this, Keys.FK_FORM_EVENT_FK, null);

		return _event;
	}

	private transient ScopePath _scope;

	/**
	 * Get the implicit join path to the <code>scope</code> table.
	 */
	public ScopePath scope() {
		if (_scope == null)
			_scope = new ScopePath(this, Keys.FK_FORM_SCOPE_FK, null);

		return _scope;
	}

	private transient FormAuditPath _formAudit;

	/**
	 * Get the implicit to-many join path to the <code>form_audit</code> table
	 */
	public FormAuditPath formAudit() {
		if (_formAudit == null)
			_formAudit = new FormAuditPath(this, null, Keys.FK_FORM_AUDIT_OBJECT_FK.getInverseKey());

		return _formAudit;
	}

	private transient WorkflowStatusPath _workflowStatus;

	/**
	 * Get the implicit to-many join path to the <code>workflow_status</code> table
	 */
	public WorkflowStatusPath workflowStatus() {
		if (_workflowStatus == null)
			_workflowStatus = new WorkflowStatusPath(this, null, Keys.FK_WORKFLOW_STATUS_FORM_FK.getInverseKey());

		return _workflowStatus;
	}

	@Override
	public Form as(String alias) {
		return new Form(DSL.name(alias), this);
	}

	@Override
	public Form as(Name alias) {
		return new Form(alias, this);
	}

	@Override
	public Form as(Table<?> alias) {
		return new Form(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Form rename(String name) {
		return new Form(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Form rename(Name name) {
		return new Form(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Form rename(Table<?> name) {
		return new Form(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Form where(Condition condition) {
		return new Form(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Form where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Form where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Form where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Form where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Form where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Form where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Form where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Form whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Form whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
