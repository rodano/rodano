/*
 * This file is generated by jOOQ.
 */
package ch.rodano.core.model.jooq.tables;


import ch.rodano.core.helpers.configuration.DateConverter;
import ch.rodano.core.helpers.configuration.StringSetConverter;
import ch.rodano.core.model.jooq.DefaultSchema;
import ch.rodano.core.model.jooq.Indexes;
import ch.rodano.core.model.jooq.Keys;
import ch.rodano.core.model.jooq.tables.MailAttachment.MailAttachmentPath;
import ch.rodano.core.model.jooq.tables.records.MailRecord;
import ch.rodano.core.model.mail.MailOrigin;
import ch.rodano.core.model.mail.MailStatus;

import java.time.ZonedDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Set;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.EnumConverter;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Mail extends TableImpl<MailRecord> {

	private static final long serialVersionUID = 1L;

	/**
	 * The reference instance of <code>mail</code>
	 */
	public static final Mail MAIL = new Mail();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<MailRecord> getRecordType() {
		return MailRecord.class;
	}

	/**
	 * The column <code>mail.pk</code>.
	 */
	public final TableField<MailRecord, Long> PK = createField(DSL.name("pk"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

	/**
	 * The column <code>mail.creation_time</code>.
	 */
	public final TableField<MailRecord, ZonedDateTime> CREATION_TIME = createField(DSL.name("creation_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>mail.last_update_time</code>.
	 */
	public final TableField<MailRecord, ZonedDateTime> LAST_UPDATE_TIME = createField(DSL.name("last_update_time"), SQLDataType.LOCALDATETIME(3).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp(3)"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>mail.attempts</code>.
	 */
	public final TableField<MailRecord, Integer> ATTEMPTS = createField(DSL.name("attempts"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

	/**
	 * The column <code>mail.status</code>.
	 */
	public final TableField<MailRecord, MailStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(32).nullable(false), this, "", new EnumConverter<String, MailStatus>(String.class, MailStatus.class));

	/**
	 * The column <code>mail.error</code>.
	 */
	public final TableField<MailRecord, String> ERROR = createField(DSL.name("error"), SQLDataType.VARCHAR(500).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>mail.sent_time</code>.
	 */
	public final TableField<MailRecord, ZonedDateTime> SENT_TIME = createField(DSL.name("sent_time"), SQLDataType.LOCALDATETIME(3).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.LOCALDATETIME)), this, "", new DateConverter());

	/**
	 * The column <code>mail.origin</code>.
	 */
	public final TableField<MailRecord, MailOrigin> ORIGIN = createField(DSL.name("origin"), SQLDataType.VARCHAR(32).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "", new EnumConverter<String, MailOrigin>(String.class, MailOrigin.class));

	/**
	 * The column <code>mail.intent</code>.
	 */
	public final TableField<MailRecord, String> INTENT = createField(DSL.name("intent"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>mail.sender</code>.
	 */
	public final TableField<MailRecord, String> SENDER = createField(DSL.name("sender"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>mail.recipients</code>.
	 */
	public final TableField<MailRecord, Set> RECIPIENTS = createField(DSL.name("recipients"), SQLDataType.CLOB.nullable(false), this, "", new StringSetConverter());

	/**
	 * The column <code>mail.reply_to</code>.
	 */
	public final TableField<MailRecord, String> REPLY_TO = createField(DSL.name("reply_to"), SQLDataType.VARCHAR(64).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "");

	/**
	 * The column <code>mail.subject</code>.
	 */
	public final TableField<MailRecord, String> SUBJECT = createField(DSL.name("subject"), SQLDataType.VARCHAR(255).nullable(false), this, "");

	/**
	 * The column <code>mail.text_body</code>.
	 */
	public final TableField<MailRecord, String> TEXT_BODY = createField(DSL.name("text_body"), SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>mail.html_body</code>.
	 */
	public final TableField<MailRecord, String> HTML_BODY = createField(DSL.name("html_body"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "");

	private Mail(Name alias, Table<MailRecord> aliased) {
		this(alias, aliased, (Field<?>[]) null, null);
	}

	private Mail(Name alias, Table<MailRecord> aliased, Field<?>[] parameters, Condition where) {
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
	}

	/**
	 * Create an aliased <code>mail</code> table reference
	 */
	public Mail(String alias) {
		this(DSL.name(alias), MAIL);
	}

	/**
	 * Create an aliased <code>mail</code> table reference
	 */
	public Mail(Name alias) {
		this(alias, MAIL);
	}

	/**
	 * Create a <code>mail</code> table reference
	 */
	public Mail() {
		this(DSL.name("mail"), null);
	}

	public <O extends Record> Mail(Table<O> path, ForeignKey<O, MailRecord> childPath, InverseForeignKey<O, MailRecord> parentPath) {
		super(path, childPath, parentPath, MAIL);
	}

	/**
	 * A subtype implementing {@link Path} for simplified path-based joins.
	 */
	public static class MailPath extends Mail implements Path<MailRecord> {

		private static final long serialVersionUID = 1L;
		public <O extends Record> MailPath(Table<O> path, ForeignKey<O, MailRecord> childPath, InverseForeignKey<O, MailRecord> parentPath) {
			super(path, childPath, parentPath);
		}
		private MailPath(Name alias, Table<MailRecord> aliased) {
			super(alias, aliased);
		}

		@Override
		public MailPath as(String alias) {
			return new MailPath(DSL.name(alias), this);
		}

		@Override
		public MailPath as(Name alias) {
			return new MailPath(alias, this);
		}

		@Override
		public MailPath as(Table<?> alias) {
			return new MailPath(alias.getQualifiedName(), this);
		}
	}

	@Override
	public Schema getSchema() {
		return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
	}

	@Override
	public List<Index> getIndexes() {
		return Arrays.asList(Indexes.MAIL_IDX_MAIL_ORIGIN, Indexes.MAIL_IDX_MAIL_SENDER, Indexes.MAIL_IDX_MAIL_STATUS, Indexes.MAIL_IDX_MAIL_SUBJECT);
	}

	@Override
	public Identity<MailRecord, Long> getIdentity() {
		return (Identity<MailRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<MailRecord> getPrimaryKey() {
		return Keys.KEY_MAIL_PRIMARY;
	}

	private transient MailAttachmentPath _mailAttachment;

	/**
	 * Get the implicit to-many join path to the <code>mail_attachment</code> table
	 */
	public MailAttachmentPath mailAttachment() {
		if (_mailAttachment == null)
			_mailAttachment = new MailAttachmentPath(this, null, Keys.FK_MAIL_ATTACHMENT_MAIL_FK.getInverseKey());

		return _mailAttachment;
	}

	@Override
	public Mail as(String alias) {
		return new Mail(DSL.name(alias), this);
	}

	@Override
	public Mail as(Name alias) {
		return new Mail(alias, this);
	}

	@Override
	public Mail as(Table<?> alias) {
		return new Mail(alias.getQualifiedName(), this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Mail rename(String name) {
		return new Mail(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Mail rename(Name name) {
		return new Mail(name, null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public Mail rename(Table<?> name) {
		return new Mail(name.getQualifiedName(), null);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Mail where(Condition condition) {
		return new Mail(getQualifiedName(), aliased() ? this : null, null, condition);
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Mail where(Collection<? extends Condition> conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Mail where(Condition... conditions) {
		return where(DSL.and(conditions));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Mail where(Field<Boolean> condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Mail where(SQL condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Mail where(@Stringly.SQL String condition) {
		return where(DSL.condition(condition));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Mail where(@Stringly.SQL String condition, Object... binds) {
		return where(DSL.condition(condition, binds));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	@PlainSQL
	public Mail where(@Stringly.SQL String condition, QueryPart... parts) {
		return where(DSL.condition(condition, parts));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Mail whereExists(Select<?> select) {
		return where(DSL.exists(select));
	}

	/**
	 * Create an inline derived table from this table
	 */
	@Override
	public Mail whereNotExists(Select<?> select) {
		return where(DSL.notExists(select));
	}
}
