server {
	listen [::]:80;
	listen 80;
	server_name {{ server_name }};
	return 301 https://$host$request_uri;
}

server {
	listen [::]:443 ssl http2;
	listen 443 ssl http2;
	server_name {{ server_name }};

	ssl_session_cache shared:SSL:10m;
	ssl_session_timeout 10m;
	ssl_certificate /etc/letsencrypt/live/{{ server_name }}/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/{{ server_name }}/privkey.pem;
	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers on;
	ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
	ssl_verify_depth 3;

	access_log /var/log/nginx/rodano.access.log;
	error_log /var/log/nginx/rodano.error.log error;

	location / {
		proxy_pass http://localhost:7586;
		proxy_redirect http://localhost:7586 https://{{ server_name }};
		proxy_http_version 1.1;

		#pass request headers to the proxy inside the Docker Compose environment
		proxy_pass_request_headers on;
		#override or set headers to be passed to the underlying server
		proxy_set_header Host $http_host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto https; #hardcode the protocol to https because we are in an https server block

		#following two lines are required to allow the application to create a websocket
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";

		#it's important to set a bigger value for read timeout
		#otherwise Nginx will stop the web socket connection after 60 seconds (the default value for proxy_read_timeout)
		#and the app may not send anything for such a short period
		#see here http://nginx.org/en/docs/http/websocket.html
		#to choose the appropriate unit, go here http://nginx.org/en/docs/syntax.html
		proxy_read_timeout 10m;
	}
}
